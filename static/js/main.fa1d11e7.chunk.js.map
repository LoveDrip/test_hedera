{"version":3,"sources":["assets/images/nftimgs/spacekitty_nft.png","assets/images/nftimgs/spaceowl_nft.png","assets/images/nftimgs/dragondoodle_nft.png","assets/images/nftimgs/doodcat_nft.png","assets/images/nftimgs/deddood_nft.png","assets/images/nftimgs/royalrat_nft.png","assets/images/nftimgs/classicalcat_nft.png","assets/images/nftimgs/alien_nft.png","assets/images/nftimgs/elementowl_nft.png","assets/images/nftimgs/elementdog_nft.png","assets/images/nftimgs/elementoctopus_nft.png","assets/images/nftimgs/qaf_nft.png","assets/images/nftimgs/primordialplanet_nft.png","component/Banner/NftSlider.js","assets/images/nftimgs/badbuddies_nft.mp4","assets/images/nftimgs/badbuddies2_nft.mp4","assets/images/nftimgs/badbuddies3_nft.mp4","assets/images/nftimgs/badbuddies_nft.png","assets/images/nftimgs/badbuddies2_nft.png","assets/images/nftimgs/badbuddies3_nft.png","assets/images/coin.png","component/Banner/SellCard.js","component/Banner/index.js","component/Marketplace/Marketplace.js","component/Marketplace/NftGrid.js","hooks/connect.js","hooks/useThemeSwitcher.js","component/Navbar/dropdown.js","assets/images/logo-ct-dark.png","assets/images/logo-ct.png","assets/images/walletIcon.svg","component/Navbar/index.js","component/Footer/index.js","assets/images/nftbanners/spaceowls_banner.png","assets/images/nftbanners/dragondoodle_banner.png","assets/images/nftbanners/doodcats_banner.png","assets/images/nftbanners/deddoods_banner.png","assets/images/nftbanners/royalrats_banner.png","assets/images/nftbanners/classicalcats_banner.png","assets/images/nftbanners/ancientaliens_banner.png","assets/images/nftbanners/elementdogs_banner.png","assets/images/nftbanners/badbuddies_banner.png","assets/images/nftbanners/no_bannder.jpg","component/Mynft/index.js","component/Sell/index.js","component/Buy/index.js","App.js","reportWebVitals.js","index.js","config/config.js"],"names":["instance","axios","create","baseURL","NftSlider","props","_useState","useState","_useState2","_slicedToArray","walletnfts","setWalletNfts","_useState3","_useState4","nftmeta","setNftmeta","_useState5","_useState6","balance","setBalance","_useState7","_useState8","accountId","AccountId","fromString","value","metadata","useEffect","_asyncToGenerator","_regeneratorRuntime","mark","_callee","nftaccounts","balances","nfts","i","currentvalue","newValue","res","meta","wrap","_context","prev","next","length","console","log","get","concat","sent","parseFloat","data","Buffer","from","fetch","json","image","slice","push","Sendnft","stop","arr","post","then","alert","_jsxs","_Fragment","children","_jsx","motion","h1","initial","opacity","animate","transition","ease","duration","delay","className","button","section","div","y","Slider","_objectSpread","dots","arrows","infinite","slidesToShow","slidesToScroll","autoplay","speed","autoplaySpeed","cssEase","responsive","breakpoint","settings","swipeToSlide","initialSlide","variableWidth","map","nft","index","src","alt","require","Banner","coin","Marketplace","injected","InjectedConnector","supportedChainIds","useThemeSwitcher","localStorage","theme","setTheme","activeTheme","root","window","document","documentElement","classList","remove","add","setItem","classNames","_len","arguments","classes","Array","_key","filter","Boolean","join","NftCollectionDropDown","Menu","as","Button","ChevronDownIcon","Transition","Fragment","enter","enterFrom","enterTo","leave","leaveFrom","leaveTo","Items","Item","_ref","active","Link","to","config","SPACEKITTYADDRESS","_ref2","SPACEOWLSADDRESS","_ref3","DRAGONDOODLEADDRESS","_ref4","DOODNFTADDRESS","_ref5","DEDNFTADDRESS","_ref6","ELEMENTOWLSADDRESS","_ref7","ELEMENTDOGSADDRESS","_ref8","ELEMENTOCTOPUSADDRESS","_ref9","QAFADDRESS","_ref10","ROYALRATSADDRESS","_ref11","CLASSICALCATSADDRESS","_ref12","ANCIENTALIENSADDRESS","_ref13","PRIMORDIALPLANETOIDSADDRESS","_ref14","BADBUDDIESADDRESS","_ref15","BADBUDDIES2ADDRESS","appMetadata","name","description","icon","hashconnect","HashConnect","Navbar","_useWeb3React","useWeb3React","account","activate","chainId","deactivate","isModalOpen","setIsModalOpen","isCopied","setIsCopied","_useContext","useContext","AccountContext","setAccountId","disconnect","_disconnect","apply","_callee3","_context3","location","reload","ex","_connectHedera","_callee4","initData","_context4","init","foundExtensionEvent","once","walletMetadata","connectToLocalWallet","pairingString","pairingEvent","pairingData","savedPairings","accountIds","onCopyText","setTimeout","connectWalletOnPageLoad","_localStorage","getItem","t0","_useThemeSwitcher","_useThemeSwitcher2","showMenu","setShowMenu","nav","id","logoDark","logoLight","onClick","FiMoon","FiSun","type","xmlns","viewBox","FiX","FiMenu","walletIcon","toString","connectHedera","Modal","title","open","footer","onCancel","closable","width","CopyToClipboard","text","onCopy","CheckOutlined","style","color","CopyOutlined","LogoutOutlined","socialLinks","url","AppFooter","link","href","target","createContext","App","AnimatePresence","minHeight","Router","Provider","AppHeader","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","Web3ReactProvider","getLibrary","provider","library","ethers","providers","Web3Provider","pollingInterval","getElementById","module","exports","baseURI","dedbaseURI","ELEMENTCATSADDRESS","BADBUDDIES3ADDRESS","SDOODTOKENADDRESS","CARETOKENADDRESS","MARKETPLACEADDRESS","DOODCATIPFSADDRESS","DEDDOODIPFSADDRESS","SPACEKITTYIPFSADDRESS","SPACEOWLIPFSADDRESS","DRAGONDOODLEIPFSADDRESS","ELEMENTOWLSIPFSADDRESS","ELEMENTDOGSIPFSADDRESS","ELEMENTOCTOPUSIPFSADDRESS","QAFIPFSADDRESS","ROYALRATSIPFSADDRESS","CLASSICALCATSIPFSADDRESS","ANCIENTALIENSIPFSADDRESS","PLANETOIDSIPFSADDRESS","BADBUDDIESIPFSADDRESS","BADBUDDIES2IPFSADDRESS","BADBUDDIES3IPFSADDRESS","DOODCATIMGIPFSADDRESS","DEDDOODIMGIPFSADDRESS","SPACEKITTYIMGIPFSADDRESS","SPACEOWLIMGIPFSADDRESS","DRAGONDOODLEIMGIPFSADDRESS","ELEMENTOWLSIMGIPFSADDRESS","ELEMENTDOGSIMGIPFSADDRESS","ELEMENTOCTOPUSIMGIPFSADDRESS","QAFIMGIPFSADDRESS","ROYALRATSIMGIPFSADDRESS","CLASSICALCATSIMGIPFSADDRESS","ANCIENTALIENSIMGIPFSADDRESS","PLANETOIDSIMGIPFSADDRESS","BADBUDDIESIMGIPFSADDRESS","BADBUDDIES2IMGIPFSADDRESS","BADBUDDIES3IMGIPFSADDRESS"],"mappings":"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","file":"static/js/main.fa1d11e7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/spacekitty_nft.05d1b85a.png\";","export default __webpack_public_path__ + \"static/media/spaceowl_nft.d8950f7b.png\";","export default __webpack_public_path__ + \"static/media/dragondoodle_nft.d7831d4b.png\";","export default __webpack_public_path__ + \"static/media/doodcat_nft.a599636a.png\";","export default __webpack_public_path__ + \"static/media/deddood_nft.fdd54cd6.png\";","export default __webpack_public_path__ + \"static/media/royalrat_nft.f7ab6894.png\";","export default __webpack_public_path__ + \"static/media/classicalcat_nft.7c687fc2.png\";","export default __webpack_public_path__ + \"static/media/alien_nft.65db6f0a.png\";","export default __webpack_public_path__ + \"static/media/elementowl_nft.0eb25a8e.png\";","export default __webpack_public_path__ + \"static/media/elementdog_nft.272f43cd.png\";","export default __webpack_public_path__ + \"static/media/elementoctopus_nft.87d3d2a7.png\";","export default __webpack_public_path__ + \"static/media/qaf_nft.a61f7ee9.png\";","export default __webpack_public_path__ + \"static/media/primordialplanet_nft.dc9f64c1.png\";","import React, { useState, useEffect } from \"react\"\nimport { motion } from \"framer-motion\";\nimport axios from \"axios\"\nimport { AccountId, TokenNftAllowance } from \"@hashgraph/sdk\";\n\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\n\nimport spacekitty_nft from \"../../assets/images/nftimgs/spacekitty_nft.png\";\nimport spaceowl_nft from \"../../assets/images/nftimgs/spaceowl_nft.png\";\nimport dragondoodle_nft from \"../../assets/images/nftimgs/dragondoodle_nft.png\";\nimport doodcat_nft from \"../../assets/images/nftimgs/doodcat_nft.png\";\nimport deddood_nft from \"../../assets/images/nftimgs/deddood_nft.png\";\nimport royalrat_nft from \"../../assets/images/nftimgs/royalrat_nft.png\";\nimport classicalcat_nft from \"../../assets/images/nftimgs/classicalcat_nft.png\";\nimport alien_nft from \"../../assets/images/nftimgs/alien_nft.png\";\nimport elementowl_nft from \"../../assets/images/nftimgs/elementowl_nft.png\";\nimport elementdog_nft from \"../../assets/images/nftimgs/elementdog_nft.png\";\nimport elementoctopus_nft from \"../../assets/images/nftimgs/elementoctopus_nft.png\";\nimport qaf_nft from \"../../assets/images/nftimgs/qaf_nft.png\";\nimport badbuddies_nft from \"../../assets/images/nftimgs/badbuddies_nft.mp4\";\nimport badbuddies2_nft from \"../../assets/images/nftimgs/badbuddies2_nft.mp4\";\nimport badbuddies3_nft from \"../../assets/images/nftimgs/badbuddies3_nft.mp4\";\nimport primordialplanet_nft from \"../../assets/images/nftimgs/primordialplanet_nft.png\";\nimport { FiPrinter } from \"react-icons/fi\";\n\nconst uri = `https://testnet.mirrornode.hedera.com/api/v1`;\nconst instance = axios.create({\n  baseURL: uri,\n})\n\nconst NftSlider = (props) => {\n  var settings = {\n    dots: false,\n    arrows: false,\n    infinite: true,\n    slidesToShow: 4,\n    slidesToScroll: 1,\n    autoplay: true,\n    speed: 500,\n    autoplaySpeed: 1500,\n    cssEase: \"linear\",\n    responsive: [\n      {\n        breakpoint: 1160,\n        settings: {\n          slidesToShow: 4,\n          slidesToScroll: 1,\n          swipeToSlide: true,\n        },\n      },\n      {\n        breakpoint: 950,\n        settings: {\n          slidesToShow: 3,\n          slidesToScroll: 1,\n          swipeToSlide: true,\n        },\n      },\n      {\n        breakpoint: 750,\n        settings: {\n          slidesToShow: 2,\n          slidesToScroll: 1,\n          initialSlide: 2,\n        },\n      },\n      {\n        breakpoint: 550,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n      {\n        breakpoint: 470,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n        },\n      },\n      {\n        breakpoint: 370,\n        settings: {\n          slidesToShow: 1,\n          slidesToScroll: 1,\n          variableWidth: true,\n        },\n      },\n    ],\n  };\n\n  const [walletnfts, setWalletNfts] = useState([]);\n  const [nftmeta, setNftmeta] = useState([])\n  const [balance, setBalance] = useState(\"\")\n  const [account, setAccount] = useState(\"\")\n  const accountId = AccountId.fromString(props.accountId)\n  let value = [], metadata=[];\n\n\t// const ws = new WebSocket(\"ws://192.168.107.58:8000\");\n\t// useEffect(() => {\n  \n\t//   ws.onopen = function () {\n\t// \tconsole.log(\"Connected to WebSocket server\");\n\t//   };\n  \n\t//   ws.onmessage = function (event) {\n\t// \tconsole.log(\"Message received:\", event.data);\n\t// \tif (account) {\n\t// \t  ws.send([account , balance, ]);\n\t// \t}\n\t//   };\n  \n\t//   ws.onclose = function () {\n\t// \tconsole.log(\"Disconnected from WebSocket server\");\n\t//   };\n  \n\t//   return () => {\n\t// \tws.close();\n\t//   };\n\t// }, [account , ws , balance]);\n\n  useEffect(async () => {\n    if (walletnfts.length > 0) {\n      console.log(\"Already imported\")\n    } else {\n      let nftaccounts = await instance.get(`accounts/${accountId}/nfts`);\n      let balances = await instance.get(`balances?account.id=${accountId}`);\n      console.log(\"balances: \", parseFloat(balances.data.balances[0].balance)/100000000);\n      setBalance(parseFloat(balances.data.balances[0].balance)/100000000)\n      console.log(\"nftaccounts: \", nftaccounts)\n      let nfts = nftaccounts.data.nfts;\n      for (var i = 0; i < nfts.length; i++) {\n        const currentvalue = nfts[i].metadata;\n        const newValue = Buffer.from(currentvalue, \"base64\");\n\n        const res = await fetch(`https://ipfs.io/ipfs/${newValue}`);\n        const meta = await res.json();\n        meta.image = meta.image.slice(7)\n        // console.log(meta);\n        value[i] = \"https://ipfs.io/ipfs/\" + meta.image;\n        console.log(value[i])\n        metadata.push(meta)\n      }\n\n      setWalletNfts(value)\n      setNftmeta(metadata);\n    }\n    Sendnft(metadata, accountId)\n\n  }, [accountId, balance])\n\n  console.log(\"walletnfts: \", walletnfts)\n  console.log(\"NFTmetadata: \", nftmeta)\n\n  const Sendnft = (metadata, accountId) => {\n    var arr = {\n      accountId: accountId,\n      metadata: metadata\n    }\n\n    axios.post(\"/users/nftsave\", arr).then((res) => {\n      console.log(res.data);\n      if (res.data === \"success\") alert(\"success\");\n      else if (res.data === \"Already send\") alert(\"Already send\");\n    });\n  }\n\n  return (\n    <>\n      <motion.h1\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          ease: \"easeInOut\",\n          duration: 0.9,\n          delay: 0.1,\n        }}\n        className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-3xl\n                      sm:text-4xl\n                      pt-20\n                      font-bold\n                      \">\n        My NFT Collections\n      </motion.h1>\n      <motion.button\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          ease: \"easeInOut\",\n          duration: 0.9,\n          delay: 0.1,\n        }}\n        className=\"cursor-pointer bg-transparent bg-gradient-to-r from-purple-700 to-pink-600\n        hover:text-gray-300 px-8 rounded-md\"\n\n      >\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      font-bold mt-1  \n                      \">\n          NFT Send\n        </motion.h1>\n      </motion.button>\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"flex flex-col items-center md:mt-12 mx-auto sm:flex-row sm:justify-between\">\n        <motion.div\n          initial={{ opacity: 0, y: -180 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n          className=\"float-right mt-8 sm:mt-0 sm:w-full text-right w-full\">\n          <Slider {...settings} className=\"mx-3 my-10 slider\">\n            {\n              walletnfts.map((nft, index) => {\n                return <div className=\"px-3\" key={index}>\n                  <div className=\"bg-white dark:bg-ternary-dark rounded-xl shadow-lg slider-card\">\n                    <div className=\"slider-img w-full\">\n                      <img\n                        src={nft}\n                        alt=\"\"\n                        className=\"2xl:h-290 h-290 lg:h-186 md:h-203 object-cover rounded-t-xl sm:h-4 w-full xl:h-242\"\n                      />\n                    </div>\n                    <h1 className=\"dark:text-white font-bold p-3 text-black text-center\">\n                      SpaceKitty\n                    </h1>\n                  </div>\n                </div>\n              })\n            }\n \n          </Slider>\n        </motion.div>\n      </motion.section>\n    </>\n  );\n\n\n\n};\nexport default NftSlider;\n","export default __webpack_public_path__ + \"static/media/badbuddies_nft.f77eeb66.mp4\";","export default __webpack_public_path__ + \"static/media/badbuddies2_nft.59b6f4d8.mp4\";","export default __webpack_public_path__ + \"static/media/badbuddies3_nft.03edb1da.mp4\";","export default __webpack_public_path__ + \"static/media/badbuddies_nft.6a30612b.png\";","export default __webpack_public_path__ + \"static/media/badbuddies2_nft.2fb46430.png\";","export default __webpack_public_path__ + \"static/media/badbuddies3_nft.4174fe89.png\";","export default __webpack_public_path__ + \"static/media/coin.81bba524.png\";","import { useState, useEffect } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { motion } from \"framer-motion\";\n\nimport CollectionCard from \"./collectionCard\";\n\nimport spacekitty_nft from \"../../assets/images/nftimgs/spacekitty_nft.png\";\nimport spaceowl_nft from \"../../assets/images/nftimgs/spaceowl_nft.png\";\nimport dragondoodle_nft from \"../../assets/images/nftimgs/dragondoodle_nft.png\";\nimport doodcat_nft from \"../../assets/images/nftimgs/doodcat_nft.png\";\nimport deddood_nft from \"../../assets/images/nftimgs/deddood_nft.png\";\nimport royalrat_nft from \"../../assets/images/nftimgs/royalrat_nft.png\";\nimport classicalcat_nft from \"../../assets/images/nftimgs/classicalcat_nft.png\";\nimport alien_nft from \"../../assets/images/nftimgs/alien_nft.png\";\nimport elementowl_nft from \"../../assets/images/nftimgs/elementowl_nft.png\";\nimport elementdog_nft from \"../../assets/images/nftimgs/elementdog_nft.png\";\nimport elementoctopus_nft from \"../../assets/images/nftimgs/elementoctopus_nft.png\";\nimport qaf_nft from \"../../assets/images/nftimgs/qaf_nft.png\";\nimport primordialplanet_nft from \"../../assets/images/nftimgs/primordialplanet_nft.png\";\nimport badbuddies_nft from \"../../assets/images/nftimgs/badbuddies_nft.png\";\nimport badbuddies2_nft from \"../../assets/images/nftimgs/badbuddies2_nft.png\";\nimport badbuddies3_nft from \"../../assets/images/nftimgs/badbuddies3_nft.png\";\n\nimport config from \"../../config/config\";\n\nimport SPACEKITTYABI from \"../../assets/abi/spacekittynftABI.json\";\nimport SPACEOWLABI from \"../../assets/abi/spaceowlnftABI.json\";\nimport DOODCATNFTABI from \"../../assets/abi/doodcatnftABI.json\";\nimport DEDDOODNFTABI from \"../../assets/abi/deddoodnftABI.json\";\nimport DRAGONDOODLEABI from \"../../assets/abi/dragondoodlenftABI.json\";\nimport ELEMENTOWLSABI from \"../../assets/abi/elementowlsnftABI.json\";\nimport ELEMENTDOGSABI from \"../../assets/abi/elementdogsnftABI.json\";\nimport ELEMENTOCTOPUSABI from \"../../assets/abi/elementoctupusnftABI.json\";\nimport QAFABI from \"../../assets/abi/qafnftABI.json\";\nimport ROYALRATSABI from \"../../assets/abi/royalratsnftABI.json\";\nimport CLASSICALCATSABI from \"../../assets/abi/classicalcatsnftABI.json\";\nimport ALIENSABI from \"../../assets/abi/aliensnftABI.json\";\nimport PLANETOIDSABI from \"../../assets/abi/planetsnftABI.json\";\n\nconst ethers = require(\"ethers\");\n\nconst SellCard = () => {\n  const { account } = useWeb3React();\n  const Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const Signer = Provider.getSigner();\n\n  const [doodcatNftCount, setDoodCatNftCount] = useState(0);\n  const [deddoodNftCount, setDedDoodNftCount] = useState(0);\n  const [spaceittyNftCount, setSpaceKittyNftCount] = useState(0);\n  const [spaceowlNftCount, setSpaceOwlNftCount] = useState(0);\n  const [dragondoodleNftCount, setDragondDolldeNftCount] = useState(0);\n  const [elementowlsNftCount, setElementowlsNftCount] = useState(0);\n  const [elementdogsNftCount, setElementdogsNftCount] = useState(0);\n  const [elementoctpusNftCount, setElmentoctpusNftCount] = useState(0);\n  const [qafNftCount, setQafNftCount] = useState(0);\n  const [royalratsNftCount, setRoyalRatsNftCount] = useState(0);\n  const [classicalCatsNftCount, setClassicalCatsNftCount] = useState(0);\n  const [ancientAliensNftCount, setAncientAliensNftCount] = useState(0);\n  const [planetoidNftCount, setPlanetoidNftCount] = useState(0);\n  const [badbuddiesNftCount, setBadbuddiesNftCount] = useState(0);\n  const [badbuddies2NftCount, setBadbuddies2NftCount] = useState(0);\n  const [badbuddies3NftCount, setBadbuddies3NftCount] = useState(0);\n\n  const DOODCATCONTRACT = new ethers.Contract(\n    config.DOODNFTADDRESS,\n    DOODCATNFTABI,\n    Signer\n  );\n\n  const DEDDOODCONTRACT = new ethers.Contract(\n    config.DEDNFTADDRESS,\n    DEDDOODNFTABI,\n    Signer\n  );\n\n  const SPACEKITTYCONTRACT = new ethers.Contract(\n    config.SPACEKITTYADDRESS,\n    SPACEKITTYABI,\n    Signer\n  );\n\n  const SPACEOWLCONTRACT = new ethers.Contract(\n    config.SPACEOWLSADDRESS,\n    SPACEOWLABI,\n    Signer\n  );\n\n  const DRAGONDOODLECONTRACT = new ethers.Contract(\n    config.DRAGONDOODLEADDRESS,\n    DRAGONDOODLEABI,\n    Signer\n  );\n\n  const ELEMENTOWLSCONTRACT = new ethers.Contract(\n    config.ELEMENTOWLSADDRESS,\n    ELEMENTOWLSABI,\n    Signer\n  );\n\n  const ELEMENTDOGSCONTRACT = new ethers.Contract(\n    config.ELEMENTDOGSADDRESS,\n    ELEMENTDOGSABI,\n    Signer\n  );\n  const ELEMENTOCTOPUSCONTRACT = new ethers.Contract(\n    config.ELEMENTOCTOPUSADDRESS,\n    ELEMENTOCTOPUSABI,\n    Signer\n  );\n  const QAFCONTRACT = new ethers.Contract(config.QAFADDRESS, QAFABI, Signer);\n  const ROYALRATSCONTRACT = new ethers.Contract(\n    config.ROYALRATSADDRESS,\n    ROYALRATSABI,\n    Signer\n  );\n  const CLASSICALCATSCONTRACT = new ethers.Contract(\n    config.CLASSICALCATSADDRESS,\n    CLASSICALCATSABI,\n    Signer\n  );\n  const ALIENSCONTRACT = new ethers.Contract(\n    config.ANCIENTALIENSADDRESS,\n    ALIENSABI,\n    Signer\n  );\n  const PLANETOIDSCONTRACT = new ethers.Contract(\n    config.PRIMORDIALPLANETOIDSADDRESS,\n    PLANETOIDSABI,\n    Signer\n  );\n  const BADBUDDIESCONTRACT = new ethers.Contract(\n    config.BADBUDDIESADDRESS,\n    SPACEKITTYABI,\n    Signer\n  );\n  const BADBUDDIES2CONTRACT = new ethers.Contract(\n    config.BADBUDDIES2ADDRESS,\n    SPACEKITTYABI,\n    Signer\n  );\n\n  const BADBUDDIES3CONTRACT = new ethers.Contract(\n    config.BADBUDDIES3ADDRESS,\n    SPACEKITTYABI,\n    Signer\n  );\n\n  const getNFTCount = async () => {\n    await DOODCATCONTRACT.walletOfOwner(account).then(async (data) => {\n      setDoodCatNftCount(data.length);\n    });\n\n    await DEDDOODCONTRACT.walletOfOwner(account).then(async (data) => {\n      setDedDoodNftCount(data.length);\n    });\n\n    await SPACEKITTYCONTRACT.walletOfOwner(account).then(async (data) => {\n      setSpaceKittyNftCount(data.length);\n    });\n\n    await SPACEOWLCONTRACT.walletOfOwner(account).then(async (data) => {\n      setSpaceOwlNftCount(data.length);\n    });\n\n    await DRAGONDOODLECONTRACT.walletOfOwner(account).then(async (data) => {\n      setDragondDolldeNftCount(data.length);\n    });\n\n    await ELEMENTOWLSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setElementowlsNftCount(data.length);\n    });\n\n    await ELEMENTDOGSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setElementdogsNftCount(data.length);\n    });\n\n    await ELEMENTOCTOPUSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setElmentoctpusNftCount(data.length);\n    });\n\n    await QAFCONTRACT.walletOfOwner(account).then(async (data) => {\n      setQafNftCount(data.length);\n    });\n\n    await CLASSICALCATSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setClassicalCatsNftCount(data.length);\n    });\n\n    await ROYALRATSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setRoyalRatsNftCount(data.length);\n    });\n\n    await ALIENSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setAncientAliensNftCount(data.length);\n    });\n\n    await PLANETOIDSCONTRACT.walletOfOwner(account).then(async (data) => {\n      setPlanetoidNftCount(data.length);\n    });\n\n    await BADBUDDIESCONTRACT.walletOfOwner(account).then(async (data) => {\n      setBadbuddiesNftCount(data.length);\n    });\n\n    await BADBUDDIES2CONTRACT.walletOfOwner(account).then(async (data) => {\n      setBadbuddies2NftCount(data.length);\n    });\n\n    await BADBUDDIES3CONTRACT.walletOfOwner(account).then(async (data) => {\n      setBadbuddies3NftCount(data.length);\n    });\n  };\n\n  useEffect(() => {\n    if (account) {\n      getNFTCount();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n  return (\n    <>\n      <motion.h1\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          ease: \"easeInOut\",\n          duration: 0.9,\n          delay: 0.1,\n        }}\n        className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-3xl\n                      sm:text-4xl\n                      pt-20\n                      font-bold\n                      sm:mb-20\n                      \">\n        Selling Collections\n      </motion.h1>\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"sm:pb-16\">\n        <motion.div\n          initial={{ opacity: 0, y: -180 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n          className=\"grid grid-cols-1 lg:grid-cols-4 md:grid-cols-3 mt-6 sm:gap-10 sm:grid-cols-3\">\n          <CollectionCard\n            image={spacekitty_nft}\n            title=\"SpaceKitty\"\n            count={spaceittyNftCount}\n            contractAddresss={config.SPACEKITTYADDRESS}\n          />\n          <CollectionCard\n            image={spaceowl_nft}\n            title=\"SpaceOwls\"\n            count={spaceowlNftCount}\n            contractAddresss={config.SPACEOWLSADDRESS}\n          />\n          <CollectionCard\n            image={dragondoodle_nft}\n            title=\"Dragon Doodles\"\n            count={dragondoodleNftCount}\n            contractAddresss={config.DRAGONDOODLEADDRESS}\n          />\n          <CollectionCard\n            image={doodcat_nft}\n            title=\"DoodCats\"\n            count={doodcatNftCount}\n            contractAddresss={config.DOODNFTADDRESS}\n          />\n          <CollectionCard\n            image={deddood_nft}\n            title=\"DedDoods\"\n            count={deddoodNftCount}\n            contractAddresss={config.DEDNFTADDRESS}\n          />\n          <CollectionCard\n            image={elementowl_nft}\n            title=\"ElementOwls\"\n            count={elementowlsNftCount}\n            contractAddresss={config.ELEMENTOWLSADDRESS}\n          />\n          <CollectionCard\n            image={elementdog_nft}\n            title=\"ElementDogs\"\n            count={elementdogsNftCount}\n            contractAddresss={config.ELEMENTDOGSADDRESS}\n          />\n          <CollectionCard\n            image={elementoctopus_nft}\n            title=\"ElementOctopus\"\n            count={elementoctpusNftCount}\n            contractAddresss={config.ELEMENTOCTOPUSADDRESS}\n          />\n          <CollectionCard\n            image={qaf_nft}\n            title=\"QAF\"\n            count={qafNftCount}\n            contractAddresss={config.QAFADDRESS}\n          />\n\n          <CollectionCard\n            image={royalrat_nft}\n            title=\"Royal Rats\"\n            count={royalratsNftCount}\n            contractAddresss={config.ROYALRATSADDRESS}\n          />\n          <CollectionCard\n            image={classicalcat_nft}\n            title=\"The Classical Cats\"\n            count={classicalCatsNftCount}\n            contractAddresss={config.CLASSICALCATSADDRESS}\n          />\n          <CollectionCard\n            image={alien_nft}\n            title=\"The Ancient Aliens\"\n            count={ancientAliensNftCount}\n            contractAddresss={config.ANCIENTALIENSADDRESS}\n          />\n\n          <CollectionCard\n            image={primordialplanet_nft}\n            title=\"The Primordial Planetoids\"\n            count={planetoidNftCount}\n            contractAddresss={config.PRIMORDIALPLANETOIDSADDRESS}\n          />\n\n          <CollectionCard\n            image={badbuddies_nft}\n            title=\"Bad Buddies\"\n            count={badbuddiesNftCount}\n            contractAddresss={config.BADBUDDIESADDRESS}\n          />\n\n          <CollectionCard\n            image={badbuddies2_nft}\n            title=\"Bad Buddies2\"\n            count={badbuddies2NftCount}\n            contractAddresss={config.BADBUDDIES2ADDRESS}\n          />\n\n          <CollectionCard\n            image={badbuddies3_nft}\n            title=\"Bad Buddies3\"\n            count={badbuddies3NftCount}\n            contractAddresss={config.BADBUDDIES3ADDRESS}\n          />\n        </motion.div>\n      </motion.section>\n    </>\n  );\n};\nexport default SellCard;\n","import { motion } from \"framer-motion\";\n\nimport NftSlider from \"./NftSlider\";\nimport SellCard from \"./SellCard\";\n\nimport coin from \"../../assets/images/coin.png\";\n\nimport \"./banner.css\";\n\nconst Banner = (props) => {\n  return (\n    <div className=\"\">\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"flex flex-col items-center md:mt-2\n                      mt-12 mx-auto sm:flex-row sm:justify-between\n                      border-b\n                    dark:border-gray-700\n                    border-gray-200\n                      p-4\n                      \">\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"dark:text-white font-bold\n                          items-center lg:text-xl sm:text-center\n                          text-4xl text-center text-ternary-dark\n                          uppercase xl:text-5xl welcom-title\">\n          Welcome Our MarketPlace !<p>Amazing and Beautiful NFTs are here.</p>\n        </motion.h1>\n\n        <motion.div\n          initial={{ opacity: 0, y: -180 }}\n          animate={{ opacity: 1, y: 0 }}\n          transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n          className=\"float-right hidden mt-8 sm:block sm:mt-0 sm:w-1/4 text-right w-full\">\n          <img src={coin} alt=\"Developer\" className=\"coin\" />\n        </motion.div>\n      </motion.section>\n      {\n        props.accountId ? <NftSlider accountId={props.accountId} /> : <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"font-general-regular \n                text-center text-ternary-dark\n                dark:text-white\n                text-xs\n                sm:text-xs\n                pt-20\n                font-bold\n                \">\n          Please Connect Wallet First...\n        </motion.h1>\n      }\n\n      {/* <SellCard /> */}\n    </div>\n  );\n\n};\n\nexport default Banner;\n","import Banner from \"../Banner\";\nimport NftGrid from \"./NftGrid\";\n\nconst Marketplace = (props) => {\n    console.log(props);\n  return (\n    <div className=\"container mx-auto\">\n\n      <Banner accountId={props.accountId} />\n      {/* <NftGrid /> */}\n    </div>\n  );\n};\n\nexport default Marketplace;\n","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { motion } from \"framer-motion\";\n\nimport { FiSearch } from \"react-icons/fi\";\nimport { MetroSpinner } from \"react-spinners-kit\";\n\nimport MARKETPLACEABI from \"../../assets/abi/marketplaceABI.json\";\n\nimport config from \"../../config/config\";\n\nimport NftSingle from \"./NftSingle\";\n\nconst ethers = require(\"ethers\");\n\nconst NftGrid = () => {\n  const { account } = useWeb3React();\n\n  const [getDataLoading, setGetDataLoading] = useState(false);\n  const [marketplaceArrary, setMarketplaceArray] = useState([]);\n\n  const [marketplaceRecentlyfilterArray, setMarketPlaceRecentlyFilterArray] =\n    useState([]);\n  const [marketplaceSearchfilterArray, setMarketPlaceSearchFilterArray] =\n    useState([]);\n  const [\n    marketplaceCollectionfilterArray,\n    setMarketPlaceCollectionFilterArray,\n  ] = useState([]);\n  const [marketplaceAZfilterArray, setMarketPlaceAZFilterArray] = useState([]);\n  const [marketplaceZAfilterArray, setMarketPlaceZAFilterArray] = useState([]);\n  const [nftNameSearchState, setNftNameSearchState] = useState(false);\n  const [nftCollectionsearchState, setNftCollectionSearchState] =\n    useState(false);\n  const [nftSortAZ, setNftSortAZ] = useState(false);\n  const [nftSortZA, setNftSortZA] = useState(false);\n  const [nftSortRecently, setNftSortRecently] = useState(false);\n  const Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const Signer = Provider.getSigner();\n\n  const marketPlaceContract = new ethers.Contract(\n    config.MARKETPLACEADDRESS,\n    MARKETPLACEABI,\n    Signer\n  );\n\n  const getNftData = async () => {\n    setGetDataLoading(true);\n    let nftArrary = [];\n    await marketPlaceContract.fetchMarketItems().then((data) => {\n      for (let i = 0; i < data.length; i++) {\n        nftArrary.push({\n          itemId: Number(data[i].itemId),\n          nftName:\n            data[i].nftContract === config.SPACEKITTYADDRESS\n              ? \"SpaceKitty # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.SPACEOWLSADDRESS\n              ? \"SpaceOwls # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.DRAGONDOODLEADDRESS\n              ? \"Dragon Doodles # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.DOODNFTADDRESS\n              ? \"DoodCats # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.DEDNFTADDRESS\n              ? \"DedDoods # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.ELEMENTOWLSADDRESS\n              ? \"ElementOwls # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.ELEMENTDOGSADDRESS\n              ? \"ElementDogs # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.ELEMENTOCTOPUSADDRESS\n              ? \"ElementOctopus # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.QAFADDRESS\n              ? \"QAF # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.ROYALRATSADDRESS\n              ? \"Royal Rats # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.CLASSICALCATSADDRESS\n              ? \"The Classical Cats # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.ANCIENTALIENSADDRESS\n              ? \"The Ancient Aliens # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.PRIMORDIALPLANETOIDSADDRESS\n              ? \"The Primordial Planetoids # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.BADBUDDIESADDRESS\n              ? \"Bad Buddies # \" + Number(data[i].tokenId)\n              : data[i].nftContract === config.BADBUDDIES3ADDRESS\n              ? \"Bad Buddies3 # \" + Number(data[i].tokenId)\n              : \"Bad Buddies2 # \" + Number(data[i].tokenId),\n          nftImgUrl:\n            data[i].nftContract === config.SPACEKITTYADDRESS\n              ? `${config.SPACEKITTYIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.SPACEOWLSADDRESS\n              ? `${config.SPACEOWLIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.DRAGONDOODLEADDRESS\n              ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.DOODNFTADDRESS\n              ? `${config.DOODCATIMGIPFSADDRESS}/${Number(data[i].tokenId)}.png`\n              : data[i].nftContract === config.DEDNFTADDRESS\n              ? `${config.DEDDOODIMGIPFSADDRESS}/${Number(data[i].tokenId)}.png`\n              : data[i].nftContract === config.ELEMENTOWLSADDRESS\n              ? `${config.ELEMENTOWLSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.ELEMENTDOGSADDRESS\n              ? `${config.ELEMENTDOGSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.ELEMENTOCTOPUSADDRESS\n              ? `${config.ELEMENTOCTOPUSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.QAFADDRESS\n              ? `${config.QAFIMGIPFSADDRESS}/${Number(data[i].tokenId)}.jpg`\n              : data[i].nftContract === config.ROYALRATSADDRESS\n              ? `${config.ROYALRATSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.jpg`\n              : data[i].nftContract === config.CLASSICALCATSADDRESS\n              ? `${config.CLASSICALCATSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.jpg`\n              : data[i].nftContract === config.ANCIENTALIENSADDRESS\n              ? `${config.ANCIENTALIENSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.jpg`\n              : data[i].nftContract === config.PRIMORDIALPLANETOIDSADDRESS\n              ? `${config.PLANETOIDSIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.jpg`\n              : data[i].nftContract === config.BADBUDDIESADDRESS\n              ? `${config.BADBUDDIESIMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : data[i].nftContract === config.BADBUDDIES3ADDRESS\n              ? `${config.BADBUDDIES3IMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`\n              : `${config.BADBUDDIES2IMGIPFSADDRESS}/${Number(\n                  data[i].tokenId\n                )}.png`,\n          nftContract: data[i].nftContract.toString(),\n          priceAsset: data[i].priceAsset.toString(),\n          tokenId: Number(data[i].tokenId),\n          seller: data[i].seller.toString(),\n          buyer: data[i].buyer.toString(),\n          price: parseFloat(\n            ethers.utils.formatEther(data[i].price.toString())\n          ).toFixed(2),\n          listedTime: Number(data[i].listedTime),\n          isSold: data.isSold,\n        });\n      }\n    });\n    let filterArray = [];\n    filterArray = nftArrary.sort((a, b) =>\n      a.nftName.toLowerCase() > b.nftName.toLowerCase() ? 1 : -1\n    );\n    setMarketplaceArray(filterArray);\n    setGetDataLoading(false);\n  };\n\n  useEffect(() => {\n    account && getNftData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account]);\n\n  const nftNameFilter = (searchNft) => {\n    let filterArray = [];\n    filterArray = marketplaceArrary.filter((marketArray) =>\n      marketArray.nftName.toLowerCase().includes(searchNft.toLowerCase())\n        ? marketplaceArrary\n        : searchNft === \"\"\n        ? marketplaceArrary\n        : \"\"\n    );\n    setMarketPlaceSearchFilterArray(filterArray);\n    setNftNameSearchState(true);\n    setNftCollectionSearchState(false);\n    setNftSortAZ(false);\n    setNftSortRecently(false);\n    setNftSortZA(false);\n  };\n\n  const nftCollectionFilter = (searchNft) => {\n    setMarketPlaceCollectionFilterArray(0);\n    let filterArray = [];\n    filterArray = marketplaceArrary.filter((marketArray) =>\n      marketArray.nftName.toLowerCase().includes(searchNft.toLowerCase())\n        ? marketplaceArrary\n        : searchNft === \"All NFTs\"\n        ? marketplaceArrary\n        : \"\"\n    );\n    setMarketPlaceCollectionFilterArray(filterArray);\n    setNftCollectionSearchState(true);\n    setNftSortRecently(false);\n    setNftNameSearchState(false);\n    setNftSortZA(false);\n    setNftSortAZ(false);\n  };\n\n  const nftSortbyAZ = (searchNft) => {\n    let filterArray = [];\n    if (searchNft === \"Sort(A - Z)\") {\n      filterArray = marketplaceArrary.sort((a, b) =>\n        a.nftName.toLowerCase() > b.nftName.toLowerCase() ? 1 : -1\n      );\n      setMarketPlaceAZFilterArray(filterArray);\n      setNftSortAZ(true);\n      setNftSortRecently(false);\n      setNftSortZA(false);\n      setNftCollectionSearchState(false);\n      setNftNameSearchState(false);\n    } else if (searchNft === \"Sort(Z - A)\") {\n      filterArray = marketplaceArrary.sort((a, b) =>\n        a.nftName.toLowerCase() < b.nftName.toLowerCase() ? 1 : -1\n      );\n      setMarketPlaceZAFilterArray(filterArray);\n      setNftSortZA(true);\n      setNftSortRecently(false);\n      setNftSortAZ(false);\n      setNftCollectionSearchState(false);\n      setNftNameSearchState(false);\n    } else if (searchNft === \"Recently Items\") {\n      console.log(marketplaceArrary);\n      filterArray = marketplaceArrary.sort((a, b) =>\n        a.listedTime < b.listedTime ? 1 : -1\n      );\n      setMarketPlaceRecentlyFilterArray(filterArray);\n      setNftSortRecently(true);\n      setNftSortZA(false);\n      setNftSortAZ(false);\n      setNftCollectionSearchState(false);\n      setNftNameSearchState(false);\n    }\n  };\n\n  return (\n    <section className=\"mt-5 py-15 sm:mt-10 sm:py-10\">\n      <div className=\"text-center\">\n        <p\n          className=\"dark:text-white\n                        font-bold\n                        font-general-medium\n                        mb-1 sm:text-4xl\n                        text-2xl\n                        text-ternary-dark\n                        \">\n          Buying Collections\n        </p>\n      </div>\n\n      <div className=\"mt-7 sm:mt-7\">\n        <h3\n          className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-md\n                      sm:text-xl\n                      mb-10\n                      font-bold\n                      \">\n          Search nfts by name or filter by collection\n        </h3>\n        <div\n          className=\" \n                        sm:flex\n                        sm:w-full\n                        border-b border-primary-light\n                        dark:border-gray-700\n                        justify-between\n                        pb-3\n                        gap-3\n                        \">\n          <div className=\"flex gap-2 sm:w-1/4 w-full\">\n            <span\n              className=\"\n                          sm:block\n                          bg-primary-light\n                          dark:bg-ternary-dark\n                          p-2.5\n                          shadow-sm\n                          rounded-xl\n                          cursor-pointer\n                          \">\n              <FiSearch className=\"dark:text-white h-5 text-ternary-dark w-5\"></FiSearch>\n            </span>\n            <input\n              className=\"font-general-medium \n                          w-full\n                          pl-3\n                          pr-1\n                          sm:px-4\n                          py-2\n                          border \n                          dark:border-ternary-dark  \n                          rounded-lg\n                          text-sm\n                          sm:text-md\n                          bg-secondary-light\n                          dark:bg-ternary-dark\n                          text-primary-dark\n                          dark:text-white\n                          focus:outline-none\n                          \"\n              id=\"nftSearch\"\n              name=\"nftSearch\"\n              type=\"search\"\n              required=\"\"\n              placeholder=\"Search NFTs\"\n              aria-label=\"Name\"\n              onChange={(e) => nftNameFilter(e.target.value)}\n            />\n          </div>\n\n          <div className=\"flex justify-between mt-3 sm:justify-end sm:mt-0 sm:w-3/4\">\n            <select\n              className=\"font-general-medium \n                  sm:px-6\n                  py-2\n                  border \n                  border-gray-200\n                  dark:border-ternary-dark\n                  rounded-lg\n                  text-sm\n                  sm:text-md\n                  dark:font-medium\n                  bg-secondary-light\n                  text-ternary-dark\n                  dark:bg-ternary-dark\n                  dark:text-white\n                  outline-none\n                  mx-1\n            \"\n              onChange={(e) => nftCollectionFilter(e.target.value)}>\n              <option className=\"sm:text-md text-normal\">All NFTs </option>\n              <option className=\"sm:text-md text-normal\">SpaceKitty </option>\n              <option className=\"sm:text-md text-normal\">SpaceOwls </option>\n              <option className=\"sm:text-md text-normal\">\n                Dragon Doodles{\" \"}\n              </option>\n              <option className=\"sm:text-md text-normal\">DoodCats </option>\n              <option className=\"sm:text-md text-normal\">DedDoods </option>\n              <option className=\"sm:text-md text-normal\">ElementOwls </option>\n              <option className=\"sm:text-md text-normal\">ElementDogs </option>\n              <option className=\"sm:text-md text-normal\">\n                ElementOctopus{\" \"}\n              </option>\n              <option className=\"sm:text-md text-normal\">QAF </option>\n              <option className=\"sm:text-md text-normal\">Royal Rats </option>\n              <option className=\"sm:text-md text-normal\">\n                The Classical Cats{\" \"}\n              </option>\n              <option className=\"sm:text-md text-normal\">\n                The Ancient Aliens{\" \"}\n              </option>\n              <option className=\"sm:text-md text-normal\">\n                The Primordial Planetoids{\" \"}\n              </option>\n              <option className=\"sm:text-md text-normal\">Bad Buddies </option>\n              <option className=\"sm:text-md text-normal\">Bad Buddies2 </option>\n              <option className=\"sm:text-md text-normal\">Bad Buddies3 </option>\n            </select>\n\n            <select\n              className=\"font-general-medium \n                  sm:px-6\n                  py-2\n                  border \n                  border-gray-200\n                  dark:border-ternary-dark\n                  rounded-lg\n                  text-sm\n                  sm:text-md\n                  dark:font-medium\n                  bg-secondary-light\n                  text-ternary-dark\n                  dark:bg-ternary-dark\n                  dark:text-white\n                  outline-none\n            \"\n              onChange={(e) => nftSortbyAZ(e.target.value)}>\n              <option className=\"sm:text-md text-sm\">Sort(A - Z)</option>\n              <option className=\"sm:text-md text-sm\">Sort(Z - A)</option>\n              <option className=\"sm:text-md text-sm\">Recently Items</option>\n            </select>\n          </div>\n        </div>\n      </div>\n\n      {account ? (\n        <>\n          {getDataLoading ? (\n            <div className=\"flex justify-center mt-10 w-full\">\n              <MetroSpinner color=\"#00ff89\" />\n            </div>\n          ) : (\n            <>\n              {marketplaceArrary.length !== 0 ? (\n                <div className=\"grid grid-cols-2 lg:grid-cols-4 md:grid-cols-3 mt-6 p-3 sm:gap-10 sm:grid-cols-3\">\n                  {nftNameSearchState ? (\n                    <>\n                      {\" \"}\n                      {marketplaceSearchfilterArray.map((nftArray, index) => (\n                        <NftSingle\n                          key={index}\n                          title={nftArray.nftName}\n                          image={nftArray.nftImgUrl}\n                          price={nftArray.price}\n                          contractAddress={nftArray.nftContract}\n                          priceAsset={nftArray.priceAsset}\n                          tokenId={nftArray.tokenId}\n                        />\n                      ))}\n                    </>\n                  ) : nftCollectionsearchState ? (\n                    <>\n                      {\" \"}\n                      {marketplaceCollectionfilterArray.map(\n                        (nftArray, index) => (\n                          <NftSingle\n                            key={index}\n                            title={nftArray.nftName}\n                            image={nftArray.nftImgUrl}\n                            price={nftArray.price}\n                            contractAddress={nftArray.nftContract}\n                            priceAsset={nftArray.priceAsset}\n                            tokenId={nftArray.tokenId}\n                          />\n                        )\n                      )}\n                    </>\n                  ) : nftSortAZ ? (\n                    <>\n                      {\" \"}\n                      {marketplaceAZfilterArray.map((nftArray, index) => (\n                        <NftSingle\n                          key={index}\n                          title={nftArray.nftName}\n                          image={nftArray.nftImgUrl}\n                          price={nftArray.price}\n                          contractAddress={nftArray.nftContract}\n                          priceAsset={nftArray.priceAsset}\n                          tokenId={nftArray.tokenId}\n                        />\n                      ))}\n                    </>\n                  ) : nftSortZA ? (\n                    <>\n                      {\" \"}\n                      {marketplaceZAfilterArray.map((nftArray, index) => (\n                        <NftSingle\n                          key={index}\n                          title={nftArray.nftName}\n                          image={nftArray.nftImgUrl}\n                          price={nftArray.price}\n                          contractAddress={nftArray.nftContract}\n                          priceAsset={nftArray.priceAsset}\n                          tokenId={nftArray.tokenId}\n                        />\n                      ))}\n                    </>\n                  ) : nftSortRecently ? (\n                    <>\n                      {\" \"}\n                      {marketplaceRecentlyfilterArray.map((nftArray, index) => (\n                        <NftSingle\n                          key={index}\n                          title={nftArray.nftName}\n                          image={nftArray.nftImgUrl}\n                          price={nftArray.price}\n                          contractAddress={nftArray.nftContract}\n                          priceAsset={nftArray.priceAsset}\n                          tokenId={nftArray.tokenId}\n                        />\n                      ))}\n                    </>\n                  ) : (\n                    <>\n                      {\" \"}\n                      {marketplaceArrary.map((nftArray, index) => (\n                        <NftSingle\n                          key={index}\n                          title={nftArray.nftName}\n                          image={nftArray.nftImgUrl}\n                          price={nftArray.price}\n                          contractAddress={nftArray.nftContract}\n                          priceAsset={nftArray.priceAsset}\n                          tokenId={nftArray.tokenId}\n                        />\n                      ))}\n                    </>\n                  )}\n                </div>\n              ) : (\n                <motion.h1\n                  initial={{ opacity: 0 }}\n                  animate={{ opacity: 1 }}\n                  transition={{\n                    ease: \"easeInOut\",\n                    duration: 0.9,\n                    delay: 0.1,\n                  }}\n                  className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-5\n                      sm:pt-20\n                      font-bold\n                      \">\n                  Nothing to show...\n                </motion.h1>\n              )}\n            </>\n          )}\n        </>\n      ) : (\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-5\n                      sm:pt-20\n                      font-bold\n                      \">\n          Please Connect wallet\n        </motion.h1>\n      )}\n    </section>\n  );\n};\n\nexport default NftGrid;\n","import { InjectedConnector } from \"@web3-react/injected-connector\";\n\nexport const injected = new InjectedConnector({\n  supportedChainIds: [19],\n});\n","import { useEffect, useState } from 'react'\n\nconst useThemeSwitcher = () => {\n  const [theme, setTheme] = useState(localStorage.theme)\n  const activeTheme = theme === 'dark' ? 'light' : 'dark'\n\n  useEffect(() => {\n    const root = window.document.documentElement\n\n    root.classList.remove(activeTheme)\n    root.classList.add(theme)\n    localStorage.setItem('theme', theme)\n  }, [theme, activeTheme])\n\n  return [activeTheme, setTheme]\n}\n\nexport default useThemeSwitcher\n","import { Fragment } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Menu, Transition } from \"@headlessui/react\";\nimport { ChevronDownIcon } from \"@heroicons/react/20/solid\";\nimport config from \"../../config/config\";\n\nfunction classNames(...classes) {\n  return classes.filter(Boolean).join(\" \");\n}\n\nexport default function NftCollectionDropDown() {\n  return (\n    <Menu as=\"div\" className=\"flex justify-end my-3 relative text-left\">\n      <div>\n        <Menu.Button\n          className=\"bg-white dark:bg-ternary-dark\n                      dark:text-white focus:outline-none font-medium\n                      hover:bg-gray-50 dark:hover:bg-gray-600 inline-flex\n                        justify-end px-4 py-2 rounded-md\n                        shadow-sm text-gray-700 text-sm w-full \">\n          My NFT Collections\n          <ChevronDownIcon className=\"-mr-1 h-5 ml-2 w-5\" aria-hidden=\"true\" />\n        </Menu.Button>\n      </div>\n\n      <Transition\n        as={Fragment}\n        enter=\"transition ease-out duration-100\"\n        enterFrom=\"transform opacity-0 scale-95\"\n        enterTo=\"transform opacity-100 scale-100\"\n        leave=\"transition ease-in duration-75\"\n        leaveFrom=\"transform opacity-100 scale-100\"\n        leaveTo=\"transform opacity-0 scale-95\">\n        <Menu.Items\n          className=\"absolute bg-white dark:bg-ternary-dark divide-gray-100\n                              divide-y focus:outline-none mt-12 origin-top-right right-0 ring-1\n                              ring-black ring-opacity-5 rounded-md shadow-lg w-56 z-10\">\n          <div className=\"py-1\">\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.SPACEKITTYADDRESS}\n                  className={classNames(\n                    active\n                      ? \"dark:bg-gray-600 bg-gray-100 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  SpaceKitty\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.SPACEOWLSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  SpaceOwls\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.DRAGONDOODLEADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  Dragon Doodles\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.DOODNFTADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  DoodCats\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.DEDNFTADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  DedDoods\n                </Link>\n              )}\n            </Menu.Item>\n          </div>\n          <div className=\"py-1\">\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.ELEMENTOWLSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  ElementOwls\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.ELEMENTDOGSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  ElementDogs\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.ELEMENTOCTOPUSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  ElementOctopus\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.QAFADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  QAF\n                </Link>\n              )}\n            </Menu.Item>\n          </div>\n          <div className=\"py-1\">\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.ROYALRATSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  Royal Rats\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.CLASSICALCATSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  Classical Cats\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.ANCIENTALIENSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  The Ancient Aliens\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.PRIMORDIALPLANETOIDSADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  The primordial Planetoids\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.BADBUDDIESADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  Bad Buddies\n                </Link>\n              )}\n            </Menu.Item>\n            <Menu.Item>\n              {({ active }) => (\n                <Link\n                  to={`/mynft/` + config.BADBUDDIES2ADDRESS}\n                  className={classNames(\n                    active\n                      ? \"bg-gray-100 dark:bg-gray-600 text-gray-900 dark:text-white\"\n                      : \"dark:text-white text-gray-700\",\n                    \"block px-4 py-2 text-sm\"\n                  )}>\n                  Bad Buddies2\n                </Link>\n              )}\n            </Menu.Item>\n          </div>\n        </Menu.Items>\n      </Transition>\n    </Menu>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logo-ct-dark.a2176d14.png\";","export default __webpack_public_path__ + \"static/media/logo-ct.d2523a67.png\";","export default __webpack_public_path__ + \"static/media/walletIcon.92105e88.svg\";","import { useState, useEffect, useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { FiMenu, FiMoon, FiSun, FiX } from \"react-icons/fi\";\nimport { motion } from \"framer-motion\";\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport { Modal } from \"antd\";\nimport { LogoutOutlined, CopyOutlined, CheckOutlined } from \"@ant-design/icons\";\n\nimport { AccountContext } from \"../../App\";\n\nimport { useWeb3React } from \"@web3-react/core\";\nimport { injected } from \"../../hooks/connect\";\nimport useThemeSwitcher from \"../../hooks/useThemeSwitcher\";\nimport { switchSongbirdNetwork } from \"../../hooks/switch-network\";\n\nimport NftCollectionDropDown from \"./dropdown\";\n\nimport { HashConnect } from \"hashconnect\";\n\nimport logoDark from \"../../assets/images/logo-ct-dark.png\";\nimport logoLight from \"../../assets/images/logo-ct.png\";\nimport walletIcon from \"../../assets/images/walletIcon.svg\";\n\nlet appMetadata = {\n  name: \"Unreal Integration NFT marketplace\",\n  description: \"Unreal Integration NFT marketplace\",\n  icon: \"https://ipfs.io/ipfs/QmWaYa4TdA67fmr2NrPeiincWFTeLEY7phKwND1pkneGVP\"\n}\n\nlet hashconnect = new HashConnect();\n\nconst Navbar = () => {\n  const { account, chainId, activate, deactivate } = useWeb3React();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isCopied, setIsCopied] = useState(false);\n\n  const {accountId, setAccountId} = useContext(AccountContext);\n  console.log(accountId)\n  async function connect() {\n    if (chainId !== 19 || chainId === undefined) {\n      switchSongbirdNetwork();\n    }\n    try {\n      await activate(injected);\n      localStorage.setItem(\"isWalletConnected\", true);\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function disconnect() {\n    try {\n      deactivate();\n      localStorage.setItem(\"isWalletConnected\", false);\n      window.location.reload();\n    } catch (ex) {\n      console.log(ex);\n    }\n  }\n\n  async function connectHedera() {\n    let initData = await hashconnect.init(appMetadata, \"testnet\", false);\n\n    hashconnect.foundExtensionEvent.once((walletMetadata) => {\n      hashconnect.connectToLocalWallet(initData.pairingString, walletMetadata);\n      console.log(\"Success to get walletmetadata\");\n    }) \n\n    hashconnect.pairingEvent.once((pairingData) => {\n      console.log(\"Success to get PairingData\", pairingData);\n      console.log(\"HashPack accountId: \", initData.savedPairings[0].accountIds[0]);\n      setAccountId(initData.savedPairings[0].accountIds[0])\n    })\n  }\n\n  const onCopyText = () => {\n    setIsCopied(true);\n    setTimeout(() => {\n      setIsCopied(false);\n    }, 1000);\n  };\n\n  const openModal = (account) => {\n    setIsModalOpen(true);\n  };\n\n  useEffect(() => {\n    const connectWalletOnPageLoad = async () => {\n      if (localStorage?.getItem(\"isWalletConnected\") === \"true\") {\n        try {\n          await activate(injected);\n          localStorage.setItem(\"isWalletConnected\", true);\n        } catch (ex) {\n          console.log(ex);\n        }\n      }\n    };\n    connectWalletOnPageLoad();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [activeTheme, setTheme] = useThemeSwitcher();\n  const [showMenu, setShowMenu] = useState(false);\n\n  function toggleMenu() {\n    if (!showMenu) {\n      setShowMenu(true);\n    } else {\n      setShowMenu(false);\n    }\n  }\n\n  return (\n    <motion.nav\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      id=\"nav\"\n      className=\"sm:container sm:mx-auto\">\n      <div className=\"block py-6 sm:flex sm:items-center sm:justify-between xl:max-w-screen-xl z-10\">\n        <div className=\"flex items-center justify-between px-4 sm:px-0\">\n          <div>\n            {activeTheme === \"dark\" ? (\n              <Link to=\"/\">\n                <div className=\"flex\">\n                  <img src={logoDark} className=\"w-10\" alt=\"Dark Logo\" />\n                  <h1 className=\"font-bold p-2 text-black\">MARKETPLACE</h1>\n                </div>\n              </Link>\n            ) : (\n              <Link to=\"/\">\n                <div className=\"flex\">\n                  <img src={logoLight} className=\"w-10\" alt=\"Light Logo\" />\n                  <h1 className=\"font-bold p-2 text-white\">MARKETPLACE</h1>\n                </div>\n              </Link>\n            )}\n          </div>\n\n          <button\n            onClick={() => setTheme(activeTheme)}\n            className=\"bg-gray-100 block border-gray-500 dark:bg-ternary-dark ml-20 p-2 rounded-xl sm:hidden\">\n            {\" \"}\n            {activeTheme === \"dark\" ? (\n              <FiMoon className=\"dark:hover:text-white hover:text-gray-400 text-gray-700 text-xl transition\" />\n            ) : (\n              <FiSun className=\"hover:text-gray-500 text-white text-xl transition\" />\n            )}\n          </button>\n\n          <div className=\"sm:hidden\">\n            <button\n              onClick={toggleMenu}\n              type=\"button\"\n              className=\"focus:outline-none\"\n              aria-label=\"Hamburger Menu\">\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 24 24\"\n                className=\"dark:text-white fill-current h-7 text-gray-700 w-7\">\n                {showMenu ? (\n                  <FiX className=\"text-3xl\" />\n                ) : (\n                  <FiMenu className=\"text-3xl\" />\n                )}\n              </svg>\n            </button>\n          </div>\n        </div>\n\n        {/* <div\n          className={\n            showMenu\n              ? \"block m-0 sm:ml-4 mt-5 sm:mt-3 sm:flex p-5 sm:p-0 justify-center items-center shadow-lg sm:shadow-none\"\n              : \"hidden\"\n          }>\n          <div className=\"flex justify-between w-full\">\n            <div className=\"border-primary-light mt-1.5 sm:border-t-0 sm:pt-0\">\n              <span\n                className=\"bg-gradient-to-r hover:text-gray-400\n                        from-purple-700 to-pink-600 block duration-300 font-general-medium\n                        mt-2 px-4 py-1.5 rounded-lg shadow-sm\n                        sm:hidden text-center text-md text-white\"\n                aria-label=\"connect button\">\n                {!account ? (\n                  <button className=\"flex font-bold\" onClick={() => connect()}>\n                    <img\n                      src={walletIcon}\n                      alt=\"walletSVG\"\n                      className=\"max-w-sm mr-2 w-5\"\n                    />\n                    Connect Wallet\n                  </button>\n                ) : (\n                  <button\n                    className=\"flex font-bold\"\n                    onClick={() => openModal(account)}>\n                    <img\n                      src={walletIcon}\n                      alt=\"walletSVG\"\n                      className=\"max-w-sm mr-2 w-5\"\n                    />\n                    {account.toString().slice(0, 4)} .....{\" \"}\n                    {account.toString().slice(-4)}\n                  </button>\n                )}\n              </span>\n            </div>\n            <NftCollectionDropDown className=\"\" />\n          </div>\n        </div> */}\n\n        <div\n          className=\"font-general-medium hidden items-center justify-center \n                      m-0 mt-5 p-5 shadow-lg sm:flex sm:ml-4 sm:mt-3 sm:p-0 sm:shadow-none\">\n          <NftCollectionDropDown />\n        </div>\n\n        <div className=\"flex-col hidden items-center justify-between md:flex-row sm:flex\">\n          <button\n            onClick={() => setTheme(activeTheme)}\n            className=\"bg-gray-100 block border-gray-500 dark:bg-ternary-dark p-2 rounded-xl\">\n            {\" \"}\n            {activeTheme === \"dark\" ? (\n              <FiMoon className=\"dark:hover:text-white hover:text-gray-400 text-gray-700 text-xl transition\" />\n            ) : (\n              <FiSun className=\"hover:text-gray-500 text-white text-xl transition\" />\n            )}\n          </button>\n\n          <div className=\"hidden md:flex\">\n            <span\n              className=\"bg-transparent bg-gradient-to-r from-purple-700 to-pink-600\n                          hover:text-gray-300\n                          duration-300 font-general-medium \n                          ml-8 px-6 py-2.5 rounded-md shadow-sm text-md text-white\n                        \"\n              aria-label=\"connect-btn\">\n              {!accountId ? (\n                <button className=\"flex font-bold\" onClick={() => connectHedera()}>\n                  <img\n                    src={walletIcon}\n                    alt=\"walletSVG\"\n                    className=\"max-w-sm mr-2 w-5\"\n                  />\n                  Connect Wallet\n                </button>\n              ) : (\n                <button\n                  className=\"flex font-bold\"\n                  onClick={() => openModal(accountId)}>\n                  <img\n                    src={walletIcon}\n                    alt=\"walletSVG\"\n                    className=\"max-w-sm mr-2 w-5\"\n                  />\n                  {/* {account.toString().slice(0, 4)} .....{\" \"}\n                  {account.toString().slice(-4)} */}\n                  {accountId.toString()}\n                </button>\n              )}\n            </span>\n          </div>\n        </div>\n      </div>\n      {activeTheme === \"dark\" ? (\n        <Modal\n          title=\"\"\n          open={isModalOpen}\n          footer={null}\n          onCancel={() => setIsModalOpen(false)}\n          closable={false}\n          className=\"lightModal\"\n          width={400}>\n          <div className=\"flex justify-center mb-4 w-full\">\n            <div className=\"bg-white border border-gray-200 flex p-2 rounded-lg text-black\">\n              <span className=\"pr-2\">\n                {\" \"}\n                {account ? <> {account.toString().slice(0, 32)} ...</> : <></>}\n              </span>\n              <CopyToClipboard text={account} onCopy={onCopyText}>\n                <div className=\"border-gray-200 border-l copy-area hover:text-gray-600 pl-3\">\n                  {!isCopied ? (\n                    <CopyOutlined style={{ color: \"black\" }} />\n                  ) : (\n                    <CheckOutlined style={{ color: \"black\" }} />\n                  )}\n                </div>\n              </CopyToClipboard>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end w-full\">\n            <button\n              className=\"flex h-50 bg-transparent dark:border-2 bg-gradient-to-r \n                        hover:text-gray-400\n                        from-purple-700 to-pink-600\n                          duration-300 font-general-medium \n                          rounded-md shadow-sm text-md text-white font-bold text-sm p-2\"\n              onClick={() => disconnect()}>\n              Disconnect\n              <div className=\"flex justify-center pt-1 w-full\">\n                <LogoutOutlined className=\"pl-1\" />\n              </div>\n            </button>\n          </div>\n        </Modal>\n      ) : (\n        <Modal\n          title=\"\"\n          open={isModalOpen}\n          footer={null}\n          onCancel={() => setIsModalOpen(false)}\n          className=\"darkModal\"\n          closable={false}\n          width={400}>\n          <div className=\"flex justify-center mb-4 w-full\">\n            <div className=\"bg-ternary-dark border border-gray-700 flex p-2 rounded-lg text-gray-300\">\n              <span className=\"pr-2\">\n                {\" \"}\n                {account ? <> {account.toString().slice(0, 32)} ...</> : <></>}\n              </span>\n              <CopyToClipboard text={account} onCopy={onCopyText}>\n                <div className=\"border-gray-700 border-l copy-area hover:text-gray-600 pl-3\">\n                  {!isCopied ? (\n                    <CopyOutlined style={{ color: \"white\" }} />\n                  ) : (\n                    <CheckOutlined style={{ color: \"white\" }} />\n                  )}\n                </div>\n              </CopyToClipboard>\n            </div>\n          </div>\n\n          <div className=\"flex justify-end w-full\">\n            <button\n              className=\"flex h-50 bg-transparent dark:border-2 bg-gradient-to-r \n                        hover:text-gray-400\n                        from-purple-700 to-pink-600\n                          duration-300 font-general-medium \n                          rounded-md shadow-sm text-md text-white font-bold text-sm p-2\"\n              onClick={() => disconnect()}>\n              Disconnect\n              <div className=\"flex justify-center pt-1 w-full\">\n                <LogoutOutlined className=\"pl-1\" />\n              </div>\n            </button>\n          </div>\n        </Modal>\n      )}\n    </motion.nav>\n  );\n};\n\nexport default Navbar;\n","const socialLinks = [\n  {\n    id: 1,\n    icon: <i className=\"fa-github fab\" />,\n    url: \"https://github.com/DOODCAT\",\n  },\n  {\n    id: 2,\n    icon: <i className=\"fa-twitter fab\" />,\n    url: \"https://twitter.com/SpaceCatsSGB\",\n  },\n\n  {\n    id: 4,\n    icon: <i className=\"fa-discord fab\" />,\n    url: \"https://discord.gg/gUYSw7ZB7R\",\n  },\n];\n\nconst AppFooter = () => {\n  return (\n    <div className=\"container mx-auto\">\n      <div className=\"border-gray-50 border-t-2 dark:border-gray-700 mt-20 pb-3 pt-20 sm:pt-30\">\n        {/* Footer social links */}\n        <div className=\"flex flex-col font-general-regular items-center justify-center mb-12 sm:mb-10\">\n          <ul className=\"flex gap-4 sm:gap-8\">\n            {socialLinks.map((link) => (\n              <a\n                href={link.url}\n                target=\"__blank\"\n                key={link.id}\n                className=\"bg-gray-50 cursor-pointer dark:bg-ternary-dark dark:hover:text-indigo-400 duration-300 hover:bg-gray-100 hover:text-indigo-500 p-4 rounded-lg shadow-sm text-gray-400\">\n                <i className=\"md:text-3xl sm:text-2xl text-xl\">{link.icon}</i>\n              </a>\n            ))}\n          </ul>\n\n          <p className=\"dark:text-gray-500 font-bold mb-5 my-10 sm:text-xl text-ternary-dark text-xl\">\n            @2022 MARKETPLACE\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AppFooter;\n","export default __webpack_public_path__ + \"static/media/spaceowls_banner.f33a0778.png\";","export default __webpack_public_path__ + \"static/media/dragondoodle_banner.70461836.png\";","export default __webpack_public_path__ + \"static/media/doodcats_banner.a329daba.png\";","export default __webpack_public_path__ + \"static/media/deddoods_banner.90631084.png\";","export default __webpack_public_path__ + \"static/media/royalrats_banner.ab7dcd9f.png\";","export default __webpack_public_path__ + \"static/media/classicalcats_banner.cd483205.png\";","export default __webpack_public_path__ + \"static/media/ancientaliens_banner.0180e4b0.png\";","export default __webpack_public_path__ + \"static/media/elementdogs_banner.d74b6402.png\";","export default __webpack_public_path__ + \"static/media/badbuddies_banner.f8ebf18e.png\";","export default __webpack_public_path__ + \"static/media/no_bannder.40ccc85f.jpg\";","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\n\nimport { MetroSpinner } from \"react-spinners-kit\";\n\nimport { useParams } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\n\nimport NftBanner from \"./nftBanner\";\nimport MyNftCard from \"./myNftcard\";\n\nimport config from \"../../config/config\";\n\nimport spaceowls_banner from \"../../assets/images/nftbanners/spaceowls_banner.png\";\nimport dragondoodle_banner from \"../../assets/images/nftbanners/dragondoodle_banner.png\";\nimport doodcats_banner from \"../../assets/images/nftbanners/doodcats_banner.png\";\nimport deddoods_banner from \"../../assets/images/nftbanners/deddoods_banner.png\";\nimport royalrats_banner from \"../../assets/images/nftbanners/royalrats_banner.png\";\nimport classicalcats_banner from \"../../assets/images/nftbanners/classicalcats_banner.png\";\nimport ancientaliens_banner from \"../../assets/images/nftbanners/ancientaliens_banner.png\";\nimport elementdogs_banner from \"../../assets/images/nftbanners/elementdogs_banner.png\";\nimport badbuddies_banner from \"../../assets/images/nftbanners/badbuddies_banner.png\";\nimport not_banner from \"../../assets/images/nftbanners/no_bannder.jpg\";\n\nimport spacekitty_nft from \"../../assets/images/nftimgs/spacekitty_nft.png\";\nimport spaceowl_nft from \"../../assets/images/nftimgs/spaceowl_nft.png\";\nimport dragondoodle_nft from \"../../assets/images/nftimgs/dragondoodle_nft.png\";\nimport doodcat_nft from \"../../assets/images/nftimgs/doodcat_nft.png\";\nimport deddood_nft from \"../../assets/images/nftimgs/deddood_nft.png\";\nimport royalrat_nft from \"../../assets/images/nftimgs/royalrat_nft.png\";\nimport classicalcat_nft from \"../../assets/images/nftimgs/classicalcat_nft.png\";\nimport alien_nft from \"../../assets/images/nftimgs/alien_nft.png\";\nimport elementowl_nft from \"../../assets/images/nftimgs/elementowl_nft.png\";\nimport elementdog_nft from \"../../assets/images/nftimgs/elementdog_nft.png\";\nimport elementoctopus_nft from \"../../assets/images/nftimgs/elementoctopus_nft.png\";\nimport qaf_nft from \"../../assets/images/nftimgs/qaf_nft.png\";\nimport primordialplanet_nft from \"../../assets/images/nftimgs/primordialplanet_nft.png\";\nimport badbuddies_nft from \"../../assets/images/nftimgs/badbuddies_nft.png\";\nimport badbuddies2_nft from \"../../assets/images/nftimgs/badbuddies2_nft.png\";\nimport badbuddies3_nft from \"../../assets/images/nftimgs/badbuddies3_nft.png\";\n\nimport SPACEKITTYABI from \"../../assets/abi/spacekittynftABI.json\";\nimport SPACEOWLABI from \"../../assets/abi/spaceowlnftABI.json\";\nimport DOODCATNFTABI from \"../../assets/abi/doodcatnftABI.json\";\nimport DEDDOODNFTABI from \"../../assets/abi/deddoodnftABI.json\";\nimport DRAGONDOODLEABI from \"../../assets/abi/dragondoodlenftABI.json\";\nimport ELEMENTOWLSABI from \"../../assets/abi/elementowlsnftABI.json\";\nimport ELEMENTDOGSABI from \"../../assets/abi/elementdogsnftABI.json\";\nimport ELEMENTOCTOPUSABI from \"../../assets/abi/elementoctupusnftABI.json\";\nimport QAFABI from \"../../assets/abi/qafnftABI.json\";\nimport ROYALRATSABI from \"../../assets/abi/royalratsnftABI.json\";\nimport CLASSICALCATSABI from \"../../assets/abi/classicalcatsnftABI.json\";\nimport ALIENSABI from \"../../assets/abi/aliensnftABI.json\";\nimport PLANETOIDSABI from \"../../assets/abi/planetsnftABI.json\";\n\nimport MARKETPLACEABI from \"../../assets/abi/marketplaceABI.json\";\n\nconst ethers = require(\"ethers\");\n\nconst Mynft = () => {\n  let { contractAddress } = useParams();\n  const { account } = useWeb3React();\n\n  const [nftArray, setNftArray] = useState([]);\n  const [listedNftArray, setListedNftArray] = useState([]);\n  const [loadingState, setLoadingState] = useState(true);\n\n  const Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const Signer = Provider.getSigner();\n\n  const marketPlaceContract = new ethers.Contract(\n    config.MARKETPLACEADDRESS,\n    MARKETPLACEABI,\n    Signer\n  );\n\n  const getListedItem = async () => {\n    let array = [];\n    await marketPlaceContract.fetchMarketItems().then(async (data) => {\n      for (let i = 0; i < data.length; i++) {\n        if (\n          account === data[i].seller &&\n          contractAddress === data[i].nftContract\n        ) {\n          array.push({\n            imgUrl:\n              contractAddress === config.SPACEKITTYADDRESS\n                ? `${config.SPACEKITTYIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.SPACEOWLSADDRESS\n                ? `${config.SPACEOWLIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.DRAGONDOODLEADDRESS\n                ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.DOODNFTADDRESS\n                ? `${config.DOODCATIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.DEDNFTADDRESS\n                ? `${config.DEDDOODIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.ELEMENTOWLSADDRESS\n                ? `${config.ELEMENTOWLSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.ELEMENTDOGSADDRESS\n                ? `${config.ELEMENTDOGSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.ELEMENTOCTOPUSADDRESS\n                ? `${config.ELEMENTOCTOPUSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.QAFADDRESS\n                ? `${config.QAFIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.jpg`\n                : contractAddress === config.ROYALRATSADDRESS\n                ? `${config.ROYALRATSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.jpg`\n                : contractAddress === config.CLASSICALCATSADDRESS\n                ? `${config.CLASSICALCATSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.jpg`\n                : contractAddress === config.ANCIENTALIENSADDRESS\n                ? `${config.ANCIENTALIENSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.jpg`\n                : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n                ? `${config.PLANETOIDSIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.BADBUDDIESADDRESS\n                ? `${config.BADBUDDIESIMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : contractAddress === config.BADBUDDIES3ADDRESS\n                ? `${config.BADBUDDIES3IMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`\n                : `${config.BADBUDDIES2IMGIPFSADDRESS}/${data[\n                    i\n                  ].tokenId.toString()}.png`,\n            tokenID: Number(data[i].tokenId).toString(),\n          });\n        }\n      }\n      setListedNftArray(array);\n      setLoadingState(false);\n    });\n  };\n\n  const getNftData = async () => {\n    let Array = [];\n\n    const nftContract = new ethers.Contract(\n      contractAddress,\n      contractAddress === config.SPACEKITTYADDRESS\n        ? SPACEKITTYABI\n        : contractAddress === config.SPACEOWLSADDRESS\n        ? SPACEOWLABI\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? DRAGONDOODLEABI\n        : contractAddress === config.DOODNFTADDRESS\n        ? DOODCATNFTABI\n        : contractAddress === config.DEDNFTADDRESS\n        ? DEDDOODNFTABI\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? DRAGONDOODLEABI\n        : contractAddress === config.ELEMENTOWLSADDRESS\n        ? ELEMENTOWLSABI\n        : contractAddress === config.ELEMENTDOGSADDRESS\n        ? ELEMENTDOGSABI\n        : contractAddress === config.ELEMENTOCTOPUSADDRESS\n        ? ELEMENTOCTOPUSABI\n        : contractAddress === config.QAFADDRESS\n        ? QAFABI\n        : contractAddress === config.ROYALRATSADDRESS\n        ? ROYALRATSABI\n        : contractAddress === config.CLASSICALCATSADDRESS\n        ? CLASSICALCATSABI\n        : contractAddress === config.ANCIENTALIENSADDRESS\n        ? ALIENSABI\n        : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n        ? PLANETOIDSABI\n        : contractAddress === config.BADBUDDIESADDRESS\n        ? SPACEKITTYABI\n        : contractAddress === config.BADBUDDIES3ADDRESS\n        ? SPACEKITTYABI\n        : SPACEKITTYABI,\n      Signer\n    );\n\n    await nftContract.walletOfOwner(account).then(async (data) => {\n      for (let i = 0; i < data.length; i++) {\n        Array.push({\n          imgUrl:\n            contractAddress === config.SPACEKITTYADDRESS\n              ? `${config.SPACEKITTYIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.SPACEOWLSADDRESS\n              ? `${config.SPACEOWLIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.DRAGONDOODLEADDRESS\n              ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.DOODNFTADDRESS\n              ? `${config.DOODCATIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.DEDNFTADDRESS\n              ? `${config.DEDDOODIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.ELEMENTOWLSADDRESS\n              ? `${config.ELEMENTOWLSIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.ELEMENTDOGSADDRESS\n              ? `${config.ELEMENTDOGSIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.ELEMENTOCTOPUSADDRESS\n              ? `${config.ELEMENTOCTOPUSIMGIPFSADDRESS}/${data[\n                  i\n                ].toString()}.png`\n              : contractAddress === config.QAFADDRESS\n              ? `${config.QAFIMGIPFSADDRESS}/${data[i].toString()}.jpg`\n              : contractAddress === config.ROYALRATSADDRESS\n              ? `${config.ROYALRATSIMGIPFSADDRESS}/${data[i].toString()}.jpg`\n              : contractAddress === config.CLASSICALCATSADDRESS\n              ? `${config.CLASSICALCATSIMGIPFSADDRESS}/${data[\n                  i\n                ].toString()}.jpg`\n              : contractAddress === config.ANCIENTALIENSADDRESS\n              ? `${config.ANCIENTALIENSIMGIPFSADDRESS}/${data[\n                  i\n                ].toString()}.jpg`\n              : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n              ? `${config.PLANETOIDSIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.BADBUDDIESADDRESS\n              ? `${config.BADBUDDIESIMGIPFSADDRESS}/${data[i].toString()}.png`\n              : contractAddress === config.BADBUDDIES3ADDRESS\n              ? `${config.BADBUDDIES3IMGIPFSADDRESS}/${data[i].toString()}.png`\n              : `${config.BADBUDDIES2IMGIPFSADDRESS}/${data[i].toString()}.png`,\n          tokenID: Number(data[i]).toString(),\n          ipfs: config.SPACEOWLIMGIPFS,\n        });\n      }\n      setNftArray(Array);\n      setLoadingState(false);\n    });\n  };\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  useEffect(async () => {\n    window.scroll(0, 0);\n    account && (await getNftData());\n    getListedItem();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [account, contractAddress]);\n\n  return (\n    <>\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"flex flex-col items-center md:mt-2\n                  mt-5 mx-auto sm:flex-row sm:justify-between\n                  \">\n        <div className=\"flex flex-col items-center justify-center relative w-full\">\n          {contractAddress === config.SPACEKITTYADDRESS ? (\n            <NftBanner\n              bannerimage={not_banner}\n              nftimg={spacekitty_nft}\n              nftname=\"SpaceKitty\"\n              contractAddress={config.SPACEKITTYADDRESS}\n            />\n          ) : contractAddress === config.SPACEOWLSADDRESS ? (\n            <NftBanner\n              bannerimage={spaceowls_banner}\n              nftimg={spaceowl_nft}\n              nftname=\"SpaceOwls\"\n              contractAddress={config.SPACEOWLSADDRESS}\n            />\n          ) : contractAddress === config.DRAGONDOODLEADDRESS ? (\n            <NftBanner\n              bannerimage={dragondoodle_banner}\n              nftimg={dragondoodle_nft}\n              nftname=\"Dragon Doodles\"\n              contractAddress={config.DRAGONDOODLEADDRESS}\n            />\n          ) : contractAddress === config.DOODNFTADDRESS ? (\n            <NftBanner\n              bannerimage={doodcats_banner}\n              nftimg={doodcat_nft}\n              nftname=\"Doodcats\"\n              contractAddress={config.DOODNFTADDRESS}\n            />\n          ) : contractAddress === config.DEDNFTADDRESS ? (\n            <NftBanner\n              bannerimage={deddoods_banner}\n              nftimg={deddood_nft}\n              nftname=\"Deddoods\"\n              contractAddress={config.DEDNFTADDRESS}\n            />\n          ) : contractAddress === config.ROYALRATSADDRESS ? (\n            <NftBanner\n              bannerimage={royalrats_banner}\n              nftimg={royalrat_nft}\n              nftname=\"Royal Rats\"\n              contractAddress={config.ROYALRATSADDRESS}\n            />\n          ) : contractAddress === config.CLASSICALCATSADDRESS ? (\n            <NftBanner\n              bannerimage={classicalcats_banner}\n              nftimg={classicalcat_nft}\n              nftname=\"Classical Cats\"\n              contractAddress={config.CLASSICALCATSADDRESS}\n            />\n          ) : contractAddress === config.ANCIENTALIENSADDRESS ? (\n            <NftBanner\n              bannerimage={ancientaliens_banner}\n              nftimg={alien_nft}\n              nftname=\"The Acient Aliens\"\n              contractAddress={config.ANCIENTALIENSADDRESS}\n            />\n          ) : contractAddress === config.ELEMENTOWLSADDRESS ? (\n            <NftBanner\n              bannerimage={not_banner}\n              nftimg={elementowl_nft}\n              nftname=\"ElementOwl\"\n              contractAddress={config.ELEMENTOWLSADDRESS}\n            />\n          ) : contractAddress === config.ELEMENTDOGSADDRESS ? (\n            <NftBanner\n              bannerimage={elementdogs_banner}\n              nftimg={elementdog_nft}\n              nftname=\"ElementDogs\"\n              contractAddress={config.ELEMENTDOGSADDRESS}\n            />\n          ) : contractAddress === config.ELEMENTOCTOPUSADDRESS ? (\n            <NftBanner\n              bannerimage={not_banner}\n              nftimg={elementoctopus_nft}\n              nftname=\"ElementOctopus\"\n              contractAddress={config.ELEMENTOCTOPUSADDRESS}\n            />\n          ) : contractAddress === config.QAFADDRESS ? (\n            <NftBanner\n              bannerimage={not_banner}\n              nftimg={qaf_nft}\n              nftname=\"QAF\"\n              contractAddress={config.QAFADDRESS}\n            />\n          ) : contractAddress === config.BADBUDDIES2ADDRESS ? (\n            <NftBanner\n              bannerimage={badbuddies_banner}\n              nftimg={badbuddies2_nft}\n              nftname=\"Bad Buddies2\"\n              contractAddress={config.BADBUDDIES2ADDRESS}\n            />\n          ) : contractAddress === config.BADBUDDIESADDRESS ? (\n            <NftBanner\n              bannerimage={badbuddies_banner}\n              nftimg={badbuddies_nft}\n              nftname=\"Bad Buddies\"\n              contractAddress={config.BADBUDDIESADDRESS}\n            />\n          ) : contractAddress === config.BADBUDDIES3ADDRESS ? (\n            <NftBanner\n              bannerimage={badbuddies_banner}\n              nftimg={badbuddies3_nft}\n              nftname=\"Bad Buddies3\"\n              contractAddress={config.BADBUDDIES3ADDRESS}\n            />\n          ) : (\n            <NftBanner\n              bannerimage={badbuddies_banner}\n              nftimg={primordialplanet_nft}\n              nftname=\"The Primordial Planetoids\"\n              contractAddress={config.PRIMORDIALPLANETOIDSADDRESS}\n            />\n          )}\n        </div>\n      </motion.section>\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"container mx-auto\">\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-sm\n                      sm:text-2xl\n                      pt-20\n                      pb-5\n                      sm:pb-10\n                      font-bold\n                      border-b\n                      border-gray-100\n                      dark:border-gray-700\n                      \">\n          My UnListed Items\n        </motion.h1>\n        {account ? (\n          <>\n            {loadingState ? (\n              <div className=\"flex justify-center mt-10 w-full\">\n                <MetroSpinner color=\"#00ff89\" />\n              </div>\n            ) : (\n              <>\n                {nftArray.length !== 0 ? (\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 md:grid-cols-3 mt-6 p-3 sm:gap-10 sm:grid-cols-3\">\n                    {nftArray.map((nft, index) => (\n                      <MyNftCard\n                        key={index}\n                        nftid={nft.tokenID}\n                        nftName={contractAddress}\n                        contractAddress={contractAddress}\n                        image={nft.imgUrl}\n                        type=\"sell\"\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <motion.h1\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{\n                      ease: \"easeInOut\",\n                      duration: 0.9,\n                      delay: 0.1,\n                    }}\n                    className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-5\n                      sm:pt-20\n                      font-bold\n                      \">\n                    Nothing to show...\n                  </motion.h1>\n                )}\n              </>\n            )}\n          </>\n        ) : (\n          <motion.h1\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{\n              ease: \"easeInOut\",\n              duration: 0.9,\n              delay: 0.1,\n            }}\n            className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-20\n                      font-bold\n                      \">\n            Please Connect Wallet...\n          </motion.h1>\n        )}\n      </motion.section>\n      <motion.section\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n        className=\"container mx-auto\">\n        <motion.h1\n          initial={{ opacity: 0 }}\n          animate={{ opacity: 1 }}\n          transition={{\n            ease: \"easeInOut\",\n            duration: 0.9,\n            delay: 0.1,\n          }}\n          className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-sm\n                      sm:text-2xl\n                      pt-20\n                      pb-5\n                      sm:pb-10\n                      font-bold\n                      border-b\n                      border-gray-100\n                      dark:border-gray-700\n                      \">\n          Listed Items\n        </motion.h1>\n        {account ? (\n          <>\n            {loadingState ? (\n              <div className=\"flex justify-center mt-10 w-full\">\n                <MetroSpinner color=\"#00ff89\" />\n              </div>\n            ) : (\n              <>\n                {listedNftArray.length !== 0 ? (\n                  <div className=\"grid grid-cols-2 lg:grid-cols-4 md:grid-cols-3 mt-6 p-3 sm:gap-10 sm:grid-cols-3\">\n                    {listedNftArray.map((nft, index) => (\n                      <MyNftCard\n                        key={index}\n                        nftid={nft.tokenID}\n                        nftName={contractAddress}\n                        contractAddress={contractAddress}\n                        image={nft.imgUrl}\n                        type=\"listed\"\n                      />\n                    ))}\n                  </div>\n                ) : (\n                  <motion.h1\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    transition={{\n                      ease: \"easeInOut\",\n                      duration: 0.9,\n                      delay: 0.1,\n                    }}\n                    className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-20\n                      font-bold\n                      \">\n                    Nothing to show...\n                  </motion.h1>\n                )}\n              </>\n            )}\n          </>\n        ) : (\n          <motion.h1\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{\n              ease: \"easeInOut\",\n              duration: 0.9,\n              delay: 0.1,\n            }}\n            className=\"font-general-regular \n                      text-center text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-20\n                      font-bold\n                      \">\n            Please Connect Wallet...\n          </motion.h1>\n        )}\n      </motion.section>\n    </>\n  );\n};\n\nexport default Mynft;\n","import { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { MetroSpinner } from \"react-spinners-kit\";\nimport Card from \"./nftCard\";\nimport { Skeleton, notification } from \"antd\";\nimport PropertiesCard from \"./propertiesCard\";\nimport \"antd/dist/antd.min.css\";\n\nimport config from \"../../config/config\";\n\nimport MARKETPLACEABI from \"../../assets/abi/marketplaceABI.json\";\n\nimport SPACEKITTYABI from \"../../assets/abi/spacekittynftABI.json\";\nimport SPACEOWLABI from \"../../assets/abi/spaceowlnftABI.json\";\nimport DOODCATNFTABI from \"../../assets/abi/doodcatnftABI.json\";\nimport DEDDOODNFTABI from \"../../assets/abi/deddoodnftABI.json\";\nimport DRAGONDOODLEABI from \"../../assets/abi/dragondoodlenftABI.json\";\nimport ELEMENTOWLSABI from \"../../assets/abi/elementowlsnftABI.json\";\nimport ELEMENTDOGSABI from \"../../assets/abi/elementdogsnftABI.json\";\nimport ELEMENTOCTOPUSABI from \"../../assets/abi/elementoctupusnftABI.json\";\nimport QAFABI from \"../../assets/abi/qafnftABI.json\";\nimport ROYALRATSABI from \"../../assets/abi/royalratsnftABI.json\";\nimport CLASSICALCATSABI from \"../../assets/abi/classicalcatsnftABI.json\";\nimport ALIENSABI from \"../../assets/abi/aliensnftABI.json\";\nimport PLANETOIDSABI from \"../../assets/abi/planetsnftABI.json\";\n\nconst ethers = require(\"ethers\");\n\nconst Sell = () => {\n  let { contractAddress, nftid, type } = useParams();\n\n  const Navigate = useNavigate();\n\n  const Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const Signer = Provider.getSigner();\n\n  const marketPlaceContract = new ethers.Contract(\n    config.MARKETPLACEADDRESS,\n    MARKETPLACEABI,\n    Signer\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [nftName, setNftName] = useState(\"\");\n  const [nftMarketItem, setNftMarketItem] = useState(\"\");\n  const [nftIPFSAddress, setNftIPFSAddress] = useState(\"\");\n\n  const [tokenValue, setTokenValue] = useState(0);\n  const [tokenType, setTokenType] = useState(\"SGB\");\n\n  const [description, setDescription] = useState(\"\");\n  const [propertiy, setPropertiy] = useState([]);\n\n  const getNftInfo = async (nftName) => {\n    setNftName(nftName);\n    setNftIPFSAddress(\n      contractAddress === config.SPACEKITTYADDRESS\n        ? `${config.SPACEKITTYIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.SPACEOWLSADDRESS\n        ? `${config.SPACEOWLIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DOODNFTADDRESS\n        ? `${config.DOODCATIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DEDNFTADDRESS\n        ? `${config.DEDDOODIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTOWLSADDRESS\n        ? `${config.ELEMENTOWLSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTDOGSADDRESS\n        ? `${config.ELEMENTDOGSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTOCTOPUSADDRESS\n        ? `${config.ELEMENTOCTOPUSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.QAFADDRESS\n        ? `${config.QAFIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.ROYALRATSADDRESS\n        ? `${config.ROYALRATSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.CLASSICALCATSADDRESS\n        ? `${config.CLASSICALCATSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.ANCIENTALIENSADDRESS\n        ? `${config.ANCIENTALIENSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n        ? `${config.PLANETOIDSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.BADBUDDIESADDRESS\n        ? `${config.BADBUDDIESIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.BADBUDDIES3ADDRESS\n        ? `${config.BADBUDDIES3IMGIPFSADDRESS}/${nftid}.png`\n        : `${config.BADBUDDIES2IMGIPFSADDRESS}/${nftid}.png`\n    );\n    await getMarketItem();\n    fetchData();\n  };\n\n  const getMarketItem = async (id) => {\n    await marketPlaceContract.fetchMarketItems().then((data) => {\n      for (let i = 0; i < data.length; i++) {\n        if (\n          data[i].nftContract === contractAddress &&\n          data[i].tokenId.toString() === nftid\n        ) {\n          setNftMarketItem(data[i].itemId.toString());\n        }\n      }\n    });\n  };\n\n  const fetchData = async () => {\n    let IPFSADDRESS =\n      contractAddress === config.SPACEKITTYADDRESS\n        ? config.SPACEKITTYIPFSADDRESS\n        : contractAddress === config.SPACEOWLSADDRESS\n        ? config.SPACEOWLIPFSADDRESS\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? config.DRAGONDOODLEIPFSADDRESS\n        : contractAddress === config.DOODNFTADDRESS\n        ? config.DOODCATIPFSADDRESS\n        : contractAddress === config.DEDNFTADDRESS\n        ? config.DEDDOODIPFSADDRESS\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? config.DRAGONDOODLEIPFSADDRESS\n        : contractAddress === config.ELEMENTOWLSADDRESS\n        ? config.ELEMENTOWLSIPFSADDRESS\n        : contractAddress === config.ELEMENTDOGSADDRESS\n        ? config.ELEMENTDOGSIPFSADDRESS\n        : contractAddress === config.ELEMENTOCTOPUSADDRESS\n        ? config.ELEMENTOCTOPUSIPFSADDRESS\n        : contractAddress === config.QAFADDRESS\n        ? config.QAFIPFSADDRESS\n        : contractAddress === config.ROYALRATSADDRESS\n        ? config.ROYALRATSIPFSADDRESS\n        : contractAddress === config.CLASSICALCATSADDRESS\n        ? config.CLASSICALCATSIPFSADDRESS\n        : contractAddress === config.ANCIENTALIENSADDRESS\n        ? config.ANCIENTALIENSIPFSADDRESS\n        : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n        ? config.PLANETOIDSIPFSADDRESS\n        : contractAddress === config.BADBUDDIESADDRESS\n        ? config.BADBUDDIESIPFSADDRESS\n        : contractAddress === config.BADBUDDIES3ADDRESS\n        ? config.BADBUDDIES3IPFSADDRESS\n        : config.BADBUDDIES2IPFSADDRESS;\n\n    try {\n      const response = await fetch(IPFSADDRESS + \"/\" + nftid + `.json`, {\n        method: \"GET\",\n      });\n      const responsedata = await response.json();\n\n      let propertiyArrary = [];\n      for (let i = 0; i < responsedata.attributes.length; i++) {\n        propertiyArrary.push({\n          trait_type: responsedata.attributes[i].trait_type,\n          value: responsedata.attributes[i].value,\n        });\n      }\n\n      setDescription(responsedata.description);\n      setPropertiy(propertiyArrary);\n    } catch (error) {\n      console.error(\"Unable to fetch data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    contractAddress === config.SPACEKITTYADDRESS\n      ? getNftInfo(\"SpaceKitty\")\n      : contractAddress === config.SPACEOWLSADDRESS\n      ? getNftInfo(\"SpaceOwls\")\n      : contractAddress === config.DRAGONDOODLEADDRESS\n      ? getNftInfo(\"Dragon Doodles\")\n      : contractAddress === config.DOODNFTADDRESS\n      ? getNftInfo(\"Doodcats\", config.DOODCATIPFSADDRESS)\n      : contractAddress === config.DEDNFTADDRESS\n      ? getNftInfo(\"DedDoods\")\n      : contractAddress === config.ROYALRATSADDRESS\n      ? getNftInfo(\"Royal Rats\")\n      : contractAddress === config.CLASSICALCATSADDRESS\n      ? getNftInfo(\"The Classical Cats\")\n      : contractAddress === config.ANCIENTALIENSADDRESS\n      ? getNftInfo(\"The Ancient Aliens\")\n      : contractAddress === config.BADBUDDIES2ADDRESS\n      ? getNftInfo(\"Bad Buddies2\")\n      : contractAddress === config.ELEMENTOWLSADDRESS\n      ? getNftInfo(\"ElementOwls\")\n      : contractAddress === config.ELEMENTDOGSADDRESS\n      ? getNftInfo(\"ElementDogs\")\n      : contractAddress === config.ELEMENTOCTOPUSADDRESS\n      ? getNftInfo(\"ElementOctopus\")\n      : contractAddress === config.QAFADDRESS\n      ? getNftInfo(\"QAF\")\n      : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n      ? getNftInfo(\"The Primordial Planetoids\")\n      : contractAddress === config.BADBUDDIES3ADDRESS\n      ? getNftInfo(\"Bad Buddies3\")\n      : getNftInfo(\"Bad Buddies\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const sellNFT = async (tokenValue) => {\n    let costType;\n    tokenType === \"SGB\" ? (costType = true) : (costType = false);\n\n    if (tokenValue <= 0) {\n      notification.warning({\n        message: \"Warning\",\n        description: \"Please enter the token Value!\",\n      });\n    } else {\n      setLoading(true);\n      let tokenAmountValue = ethers.utils.parseEther(tokenValue.toString());\n      const nftContract = new ethers.Contract(\n        contractAddress,\n        contractAddress === config.SPACEKITTYADDRESS\n          ? SPACEKITTYABI\n          : contractAddress === config.SPACEOWLSADDRESS\n          ? SPACEOWLABI\n          : contractAddress === config.DRAGONDOODLEADDRESS\n          ? DRAGONDOODLEABI\n          : contractAddress === config.DOODNFTADDRESS\n          ? DOODCATNFTABI\n          : contractAddress === config.DEDNFTADDRESS\n          ? DEDDOODNFTABI\n          : contractAddress === config.DRAGONDOODLEADDRESS\n          ? DRAGONDOODLEABI\n          : contractAddress === config.ELEMENTOWLSADDRESS\n          ? ELEMENTOWLSABI\n          : contractAddress === config.ELEMENTDOGSADDRESS\n          ? ELEMENTDOGSABI\n          : contractAddress === config.ELEMENTOCTOPUSADDRESS\n          ? ELEMENTOCTOPUSABI\n          : contractAddress === config.QAFADDRESS\n          ? QAFABI\n          : contractAddress === config.ROYALRATSADDRESS\n          ? ROYALRATSABI\n          : contractAddress === config.CLASSICALCATSADDRESS\n          ? CLASSICALCATSABI\n          : contractAddress === config.ANCIENTALIENSADDRESS\n          ? ALIENSABI\n          : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n          ? PLANETOIDSABI\n          : contractAddress === config.BADBUDDIESADDRESS\n          ? SPACEKITTYABI\n          : contractAddress === config.BADBUDDIES3ADDRESS\n          ? SPACEKITTYABI\n          : SPACEKITTYABI,\n        Signer\n      );\n\n      await nftContract\n        .approve(config.MARKETPLACEADDRESS, nftid)\n        .then((tx) => {\n          tx.wait().then(async () => {\n            marketPlaceContract\n              .createMarketItem(\n                contractAddress,\n                tokenType === \"SGB\"\n                  ? config.MARKETPLACEADDRESS\n                  : tokenType === \"sDOOD\"\n                  ? config.SDOODTOKENADDRESS\n                  : config.CARETOKENADDRESS,\n                nftid,\n                tokenAmountValue,\n                costType\n              )\n              .then((tx) => {\n                tx.wait().then(() => {\n                  notification.success({\n                    message: \"Success\",\n                    description: \"Sale Successful.\",\n                  });\n                  setLoading(false);\n                  Navigate(\"/\");\n                });\n              })\n              .catch(() => {\n                notification.error({\n                  message: \"Error\",\n                  description: \"Sale Error.\",\n                });\n                setLoading(false);\n              });\n          });\n        })\n        .catch(() => {\n          notification.info({\n            message: \"Info\",\n            description: \"Selling Canceled\",\n          });\n          setLoading(false);\n        });\n    }\n  };\n\n  const unListNFT = async () => {\n    setLoading(true);\n    await marketPlaceContract\n      .unlistMarketItem(contractAddress, nftMarketItem, {\n        gasLimit: config.gasLimit,\n      })\n      .then((tx) => {\n        tx.wait().then(async () => {\n          notification.success({\n            message: \"Success\",\n            description: \"UnListed Successful.\",\n          });\n          setLoading(false);\n          Navigate(\"/\");\n        });\n      })\n      .catch(() => {\n        notification.error({\n          message: \"Error\",\n          description: \"UnListed Error.\",\n        });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <motion.section\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n      className=\"container mx-auto\">\n      <motion.h1\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          ease: \"easeInOut\",\n          duration: 0.9,\n          delay: 0.1,\n        }}\n        className=\"font-general-regular \n                    text-center text-ternary-dark\n                    dark:text-white\n                    text-xl\n                    sm:text-3xl\n                    pt-3\n                    font-bold\n                  \">\n        {nftName} #{nftid}\n      </motion.h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 md:grid-cols-1 mt-6 p-3 sm:gap-10 sm:grid-cols-1\">\n        <div className=\"border-gray-100 dark:border-gray-700 lg:border-r-2 pb-10 sm:pb-0 sm:px-10 sm:py-5 w-full\">\n          <Card>\n            <img\n              src={nftIPFSAddress}\n              alt=\"nft img\"\n              className=\"rounded-2xl shadow-2xl w-full\"\n            />\n          </Card>\n        </div>\n        <div className=\"border-2 border-gray-100 dark:border-gray-700 p-7 rounded-2xl w-full\">\n          <div\n            className=\"font-general-regular \n                        text-left text-ternary-dark\n                        dark:text-white\n                        text-sm\n                        sm:text-xl\n                        pt-3\n                        font-bold\n                      \">\n            Description\n          </div>\n          <div\n            className=\"font-general-regular \n                        sm:text-left text-ternary-dark\n                        dark:text-white\n                        text-xs\n                        sm:text-xs\n                        pt-3\n                        font-semibold\n                      \">\n            {description === \"\" && <Skeleton active={true} />}\n            {description}\n          </div>\n          <div\n            className=\"font-general-regular \n                        text-left text-ternary-dark\n                        dark:text-white\n                        text-sm\n                        sm:text-xl\n                        pt-10\n                        font-bold\n                      \">\n            Properties\n          </div>\n          <div>\n            <div className=\"grid grid-cols-2 lg:grid-cols-2 md:grid-cols-4 py-3 sm:gap-2 sm:grid-cols-2 xl:grid-cols-4\">\n              {propertiy.length === 0 && (\n                <>\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                </>\n              )}\n              {propertiy.map((attributes, index) => (\n                <PropertiesCard\n                  propertiy={attributes.trait_type}\n                  value={attributes.value}\n                  key={index}\n                />\n              ))}\n            </div>\n          </div>\n          <div\n            className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-sm\n                      sm:text-xl\n                      pt-10\n                      font-bold\n                      \">\n            Details\n          </div>\n          <div\n            className=\"grid grid-cols-2 lg:grid-cols-2\n                        xl:pr-60\n                        lg:pr-20 md:grid-cols-2 md:pr-80\n                        sm:gap-1 sm:grid-cols-2\">\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              Contract Address :{\" \"}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              <a\n                href={\n                  \"https://songbird-explorer.flare.network/address/\" +\n                  contractAddress +\n                  \"/token-transfers\"\n                }\n                className=\"text-blue-500\n                        dark:text-blue-500\n                        dark:hover:text-blue-300\"\n                target=\"_blank\"\n                rel=\"noreferrer\">\n                {contractAddress.slice(0, 4)} ..... {contractAddress.slice(-4)}\n              </a>\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              Token ID :{\" \"}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              {nftid}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              Token Standard :\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              ERC 721\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              Blockchain :\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              songbird\n            </div>\n          </div>\n          {type === \"sell\" ? (\n            <>\n              <div className=\"mt-10 sm:flex w-full\">\n                <div className=\"flex justify-between sm:pr-3 sm:w-2/3 w-full\">\n                  <select\n                    className=\"font-general-medium \n                                  sm:px-1\n                                  py-2\n                                  mr-2\n                                  border \n                                  border-gray-200\n                                  dark:border-ternary-dark\n                                  rounded-lg\n                                  text-sm\n                                  sm:text-md\n                                  dark:font-medium\n                                  bg-secondary-light\n                                  text-ternary-dark\n                                  dark:bg-ternary-dark\n                                  dark:text-white\n                                  outline-none\n                            \"\n                    onChange={(e) => {\n                      setTokenType(e.target.value);\n                    }}>\n                    <option className=\"sm:text-md text-sm\">SGB</option>\n                    <option className=\"sm:text-md text-sm\">sDOOD</option>\n                    <option className=\"sm:text-md text-sm\">Care</option>\n                  </select>\n                  <input\n                    onChange={(e) => {\n                      setTokenValue(e.target.value);\n                    }}\n                    className=\"font-general-medium \n                                  w-full\n                                  pl-3\n                                  pr-1\n                                  sm:px-4\n                                  py-2\n                                  border \n                                  dark:border-ternary-dark  \n                                  rounded-lg\n                                  text-sm\n                                  sm:text-md\n                                  bg-secondary-light\n                                  dark:bg-ternary-dark\n                                  text-primary-dark\n                                  dark:text-white\n                                  focus:outline-none\n                                  \"\n                    id=\"name\"\n                    name=\"name\"\n                    type=\"number\"\n                    required=\"\"\n                    placeholder=\"Enter the Value\"\n                    aria-label=\"Name\"\n                  />\n                </div>\n\n                <div className=\"flex justify-between md:pt-0 pt-2 sm:w-1/3 w-full\">\n                  {loading ? (\n                    <button\n                      className=\"w-full h-10 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                  hover:from-pink-600  hover:to-purple-700\n                                    duration-300 font-general-medium hover:bg-indigo-600\n                                    rounded-md shadow-sm text-md text-white font-bold text-sm\n                                  \">\n                      <div className=\"flex justify-center p-2 w-full\">\n                        <MetroSpinner size={27} />\n                      </div>\n                    </button>\n                  ) : (\n                    <button\n                      className=\"sm:w-full h-10 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                    duration-300 font-general-medium \n                                    rounded-md shadow-sm text-md text-white w-full font-bold text-sm\n                                  \"\n                      onClick={() => sellNFT(tokenValue)}>\n                      Sell Now\n                    </button>\n                  )}\n                </div>\n              </div>\n              <div\n                className=\"grid grid-cols-2 lg:grid-cols-2\n                              sm:gap-1 sm:grid-cols-2\">\n                <div\n                  className=\"font-general-regular \n                                text-left text-ternary-dark\n                                dark:text-white\n                                text-xs\n                                sm:text-xs\n                                pt-3\n                                font-bold\n                              \">\n                  Token Fee 5% :\n                </div>\n                <div\n                  className=\"font-general-regular \n                                text-left text-ternary-dark\n                                dark:text-white\n                                text-xs\n                                sm:text-xs\n                                pt-3\n                                font-bold\n                              \">\n                  <p\n                    className=\"text-ternary-dark\n                        dark:text-white\">\n                    {parseFloat(tokenValue * 0.05).toFixed(2)} {tokenType}\n                  </p>\n                </div>\n                <div\n                  className=\"font-general-regular \n                                text-left text-ternary-dark\n                                dark:text-white\n                                text-xs\n                                sm:text-xs\n                                pt-3\n                                font-bold\n                              \">\n                  You will receive :{\" \"}\n                </div>\n                <div\n                  className=\"font-general-regular \n                                text-left text-ternary-dark\n                                dark:text-white\n                                text-xs\n                                sm:text-xs\n                                pt-3\n                                font-bold\n                                \">\n                  <p\n                    className=\"text-ternary-dark\n                                  dark:text-white\n                                \">\n                    {parseFloat(tokenValue * 0.95).toFixed(2)} {tokenType}\n                  </p>\n                </div>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"mt-10 sm:flex w-full\">\n                <div className=\"flex justify-between py-3 sm:w-1/3 w-full\">\n                  {loading ? (\n                    <button\n                      className=\"w-full  bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                  hover:from-pink-600  hover:to-purple-700\n                                    duration-300 font-general-medium hover:bg-indigo-600\n                                    rounded-md shadow-sm text-md text-white font-bold text-sm h-50\n                                  \">\n                      <div className=\"flex justify-center p-2 w-full\">\n                        <MetroSpinner size={30} />\n                      </div>\n                    </button>\n                  ) : (\n                    <button\n                      className=\"sm:w-full sm:h-50 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                  hover:from-pink-600  hover:to-purple-700\n                                    duration-300 font-general-medium hover:bg-indigo-600\n                                    rounded-md shadow-sm text-md text-white h-10 w-full font-bold text-sm\n                                  \"\n                      onClick={() => unListNFT()}>\n                      UnList Now\n                    </button>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </motion.section>\n  );\n};\n\nexport default Sell;\n","import { useEffect, useState } from \"react\";\nimport { useWeb3React } from \"@web3-react/core\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { motion } from \"framer-motion\";\nimport { MetroSpinner } from \"react-spinners-kit\";\n\nimport { Skeleton, notification } from \"antd\";\nimport \"antd/dist/antd.min.css\";\n\nimport Card from \"./nftCard\";\nimport PropertiesCard from \"./propertiesCard\";\n\nimport config from \"../../config/config\";\n\nimport MARKETPLACEABI from \"../../assets/abi/marketplaceABI.json\";\nimport SDOODTOKENABI from \"../../assets/abi/sdoodTokenABI.json\";\nimport CARETOKENABI from \"../../assets/abi/careTokenABI.json\";\n\nconst ethers = require(\"ethers\");\n\nconst Buy = () => {\n  const { account } = useWeb3React();\n\n  let { contractAddress, nftid } = useParams();\n\n  const Navigate = useNavigate();\n\n  const Provider = new ethers.providers.Web3Provider(window.ethereum);\n  const Signer = Provider.getSigner();\n\n  const marketPlaceContract = new ethers.Contract(\n    config.MARKETPLACEADDRESS,\n    MARKETPLACEABI,\n    Signer\n  );\n\n  const [loading, setLoading] = useState(false);\n  const [nftName, setNftName] = useState(\"\");\n  const [nftMarketItem, setNftMarketItem] = useState(\"\");\n  const [nftOwner, setNftOwner] = useState(\"\");\n  const [nftpriceAsset, setNftPriceAsset] = useState(\"\");\n  const [nftPrice, setNftPrice] = useState();\n  const [nftIPFSAddress, setNftIPFSAddress] = useState(\"\");\n\n  const [description, setDescription] = useState(\"\");\n  const [propertiy, setPropertiy] = useState([]);\n\n  const getNftInfo = async (nftName) => {\n    setNftName(nftName);\n    setNftIPFSAddress(\n      contractAddress === config.SPACEKITTYADDRESS\n        ? `${config.SPACEKITTYIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.SPACEOWLSADDRESS\n        ? `${config.SPACEOWLIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DOODNFTADDRESS\n        ? `${config.DOODCATIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DEDNFTADDRESS\n        ? `${config.DEDDOODIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? `${config.DRAGONDOODLEIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTOWLSADDRESS\n        ? `${config.ELEMENTOWLSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTDOGSADDRESS\n        ? `${config.ELEMENTDOGSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.ELEMENTOCTOPUSADDRESS\n        ? `${config.ELEMENTOCTOPUSIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.QAFADDRESS\n        ? `${config.QAFIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.ROYALRATSADDRESS\n        ? `${config.ROYALRATSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.CLASSICALCATSADDRESS\n        ? `${config.CLASSICALCATSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.ANCIENTALIENSADDRESS\n        ? `${config.ANCIENTALIENSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n        ? `${config.PLANETOIDSIMGIPFSADDRESS}/${nftid}.jpg`\n        : contractAddress === config.BADBUDDIESADDRESS\n        ? `${config.BADBUDDIESIMGIPFSADDRESS}/${nftid}.png`\n        : contractAddress === config.BADBUDDIES3ADDRESS\n        ? `${config.BADBUDDIES3IMGIPFSADDRESS}/${nftid}.png`\n        : `${config.BADBUDDIES2IMGIPFSADDRESS}/${nftid}.png`\n    );\n    await getMarketItem();\n    fetchData();\n  };\n\n  const getMarketItem = async () => {\n    await marketPlaceContract.fetchMarketItems().then((data) => {\n      for (let i = 0; i < data.length; i++) {\n        if (\n          data[i].nftContract === contractAddress &&\n          data[i].tokenId.toString() === nftid\n        ) {\n          setNftMarketItem(data[i].itemId.toString());\n          setNftOwner(data[i].seller.toString());\n          setNftOwner(data[i].seller.toString());\n          setNftPriceAsset(data[i].priceAsset.toString());\n          setNftPrice(\n            parseFloat(\n              ethers.utils.formatEther(data[i].price.toString())\n            ).toFixed(2)\n          );\n        }\n      }\n    });\n  };\n\n  const fetchData = async () => {\n    let IPFSADDRESS =\n      contractAddress === config.SPACEKITTYADDRESS\n        ? config.SPACEKITTYIPFSADDRESS\n        : contractAddress === config.SPACEOWLSADDRESS\n        ? config.SPACEOWLIPFSADDRESS\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? config.DRAGONDOODLEIPFSADDRESS\n        : contractAddress === config.DOODNFTADDRESS\n        ? config.DOODCATIPFSADDRESS\n        : contractAddress === config.DEDNFTADDRESS\n        ? config.DEDDOODIPFSADDRESS\n        : contractAddress === config.DRAGONDOODLEADDRESS\n        ? config.DRAGONDOODLEIPFSADDRESS\n        : contractAddress === config.ELEMENTOWLSADDRESS\n        ? config.ELEMENTOWLSIPFSADDRESS\n        : contractAddress === config.ELEMENTDOGSADDRESS\n        ? config.ELEMENTDOGSIPFSADDRESS\n        : contractAddress === config.ELEMENTOCTOPUSADDRESS\n        ? config.ELEMENTOCTOPUSIPFSADDRESS\n        : contractAddress === config.QAFADDRESS\n        ? config.QAFIPFSADDRESS\n        : contractAddress === config.ROYALRATSADDRESS\n        ? config.ROYALRATSIPFSADDRESS\n        : contractAddress === config.CLASSICALCATSADDRESS\n        ? config.CLASSICALCATSIPFSADDRESS\n        : contractAddress === config.ANCIENTALIENSADDRESS\n        ? config.ANCIENTALIENSIPFSADDRESS\n        : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n        ? config.PLANETOIDSIPFSADDRESS\n        : contractAddress === config.BADBUDDIESADDRESS\n        ? config.BADBUDDIESIPFSADDRESS\n        : contractAddress === config.BADBUDDIES3ADDRESS\n        ? config.BADBUDDIES3IPFSADDRESS\n        : config.BADBUDDIES2IPFSADDRESS;\n\n    try {\n      const response = await fetch(IPFSADDRESS + \"/\" + nftid + `.json`, {\n        method: \"GET\",\n      });\n      const responsedata = await response.json();\n\n      let propertiyArrary = [];\n      for (let i = 0; i < responsedata.attributes.length; i++) {\n        propertiyArrary.push({\n          trait_type: responsedata.attributes[i].trait_type,\n          value: responsedata.attributes[i].value,\n        });\n      }\n\n      setDescription(responsedata.description);\n      setPropertiy(propertiyArrary);\n    } catch (error) {\n      console.error(\"Unable to fetch data:\", error);\n    }\n  };\n\n  useEffect(() => {\n    window.scroll(0, 0);\n    contractAddress === config.SPACEKITTYADDRESS\n      ? getNftInfo(\"SpaceKitty\")\n      : contractAddress === config.SPACEOWLSADDRESS\n      ? getNftInfo(\"SpaceOwls\")\n      : contractAddress === config.DRAGONDOODLEADDRESS\n      ? getNftInfo(\"Dragon Doodles\")\n      : contractAddress === config.DOODNFTADDRESS\n      ? getNftInfo(\"Doodcats\", config.DOODCATIPFSADDRESS)\n      : contractAddress === config.DEDNFTADDRESS\n      ? getNftInfo(\"DedDoods\")\n      : contractAddress === config.ROYALRATSADDRESS\n      ? getNftInfo(\"Royal Rats\")\n      : contractAddress === config.CLASSICALCATSADDRESS\n      ? getNftInfo(\"The Classical Cats\")\n      : contractAddress === config.ANCIENTALIENSADDRESS\n      ? getNftInfo(\"The Ancient Aliens\")\n      : contractAddress === config.BADBUDDIES2ADDRESS\n      ? getNftInfo(\"Bad Buddies2\")\n      : contractAddress === config.ELEMENTOWLSADDRESS\n      ? getNftInfo(\"ElementOwls\")\n      : contractAddress === config.ELEMENTDOGSADDRESS\n      ? getNftInfo(\"ElementDogs\")\n      : contractAddress === config.ELEMENTOCTOPUSADDRESS\n      ? getNftInfo(\"ElementOctopus\")\n      : contractAddress === config.QAFADDRESS\n      ? getNftInfo(\"QAF\")\n      : contractAddress === config.PRIMORDIALPLANETOIDSADDRESS\n      ? getNftInfo(\"The Primordial Planetoids\")\n      : contractAddress === config.BADBUDDIES3ADDRESS\n      ? getNftInfo(\"Bad Buddies3\")\n      : getNftInfo(\"Bad Buddies\");\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const buyNFT = async () => {\n    setLoading(true);\n    if (\n      nftpriceAsset === config.SDOODTOKENADDRESS ||\n      nftpriceAsset === config.CARETOKENADDRESS\n    ) {\n      const Provider = new ethers.providers.Web3Provider(window.ethereum);\n      const Signer = Provider.getSigner();\n\n      const priceAssetContract = new ethers.Contract(\n        nftpriceAsset,\n        nftpriceAsset === config.SDOODTOKENADDRESS\n          ? SDOODTOKENABI\n          : nftpriceAsset === config.CARETOKENADDRESS\n          ? CARETOKENABI\n          : \"\",\n        Signer\n      );\n\n      await priceAssetContract\n        .approve(\n          config.MARKETPLACEADDRESS,\n          ethers.utils.parseEther(nftPrice.toString())\n        )\n        .then((tx) => {\n          tx.wait().then(() => {\n            marketPlaceContract\n              .createMarketSaleWithToken(\n                contractAddress,\n                nftpriceAsset,\n                nftMarketItem,\n                {\n                  gasLimit: config.gasLimit,\n                }\n              )\n              .then((tx) => {\n                tx.wait().then(() => {\n                  notification.success({\n                    message: \"Success\",\n                    description: \"Buy Successful!\",\n                  });\n                  Navigate(\"/\");\n                });\n              })\n              .catch(() => {\n                notification.error({\n                  message: \"Error\",\n                  description: \"Buy Error\",\n                });\n                setLoading(false);\n              });\n          });\n        })\n        .catch(() => {\n          notification.error({\n            message: \"Error\",\n            description: \"Buy Canceled\",\n          });\n          setLoading(false);\n        });\n    } else {\n      await marketPlaceContract\n        .createMarketSaleWithSGB(contractAddress, nftMarketItem, {\n          value: ethers.utils.parseEther(nftPrice.toString()),\n        })\n        .then((tx) => {\n          tx.wait().then(() => {\n            notification.success({\n              message: \"Success\",\n              description: \"Buy Successful!\",\n            });\n            Navigate(\"/\");\n          });\n        })\n        .catch(() => {\n          notification.error({\n            message: \"Error\",\n            description: \"Buy Error\",\n          });\n          setLoading(false);\n        });\n    }\n  };\n\n  const unListNFT = async () => {\n    setLoading(true);\n    await marketPlaceContract\n      .unlistMarketItem(contractAddress, nftMarketItem, {\n        gasLimit: config.gasLimit,\n      })\n      .then((tx) => {\n        tx.wait().then(async () => {\n          notification.success({\n            message: \"Success\",\n            description: \"UnListed Successful.\",\n          });\n          setLoading(false);\n          Navigate(\"/\");\n        });\n      })\n      .catch(() => {\n        notification.error({\n          message: \"Error\",\n          description: \"UnListed Error.\",\n        });\n        setLoading(false);\n      });\n  };\n\n  return (\n    <motion.section\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ ease: \"easeInOut\", duration: 0.9, delay: 0.2 }}\n      className=\"container mx-auto\">\n      <motion.h1\n        initial={{ opacity: 0 }}\n        animate={{ opacity: 1 }}\n        transition={{\n          ease: \"easeInOut\",\n          duration: 0.9,\n          delay: 0.1,\n        }}\n        className=\"font-general-regular \n                    text-center text-ternary-dark\n                    dark:text-white\n                    text-xl\n                    sm:text-3xl\n                    pt-3\n                    font-bold\n                  \">\n        {nftName} #{nftid}\n      </motion.h1>\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 md:grid-cols-1 mt-6 p-3 sm:gap-10 sm:grid-cols-1\">\n        <div className=\"border-gray-100 dark:border-gray-700 lg:border-r-2 pb-10 sm:pb-0 sm:px-10 sm:py-5 w-full\">\n          <Card>\n            <img\n              src={nftIPFSAddress}\n              alt=\"nft img\"\n              className=\"rounded-2xl shadow-2xl w-full\"\n            />\n            <motion.h1\n              initial={{ opacity: 0 }}\n              animate={{ opacity: 1 }}\n              transition={{\n                ease: \"easeInOut\",\n                duration: 0.9,\n                delay: 0.1,\n              }}\n              className=\"font-general-regular \n                    text-center text-ternary-dark\n                    dark:text-white\n                    text-xl\n                    sm:text-3xl\n                    pt-3\n                    font-bold\n                  \">\n              Price : {parseFloat(nftPrice).toFixed(1)}\n              {nftpriceAsset === config.SDOODTOKENADDRESS\n                ? \" sDOOD\"\n                : nftpriceAsset === config.CARETOKENADDRESS\n                ? \" Care\"\n                : \" SGB\"}\n            </motion.h1>\n          </Card>\n        </div>\n        <div className=\"border-2 border-gray-100 dark:border-gray-700 p-7 rounded-2xl w-full\">\n          <div\n            className=\"font-general-regular \n                        text-left text-ternary-dark\n                        dark:text-white\n                        text-sm\n                        sm:text-xl\n                        pt-3\n                        font-bold\n                      \">\n            Description\n          </div>\n          <div\n            className=\"font-general-regular \n                        sm:text-left text-ternary-dark\n                        dark:text-white\n                        text-xs\n                        sm:text-xs\n                        pt-3\n                        font-semibold\n                      \">\n            {description === \"\" && <Skeleton active={true} />}\n            {description}\n          </div>\n          <div\n            className=\"font-general-regular \n                        text-left text-ternary-dark\n                        dark:text-white\n                        text-sm\n                        sm:text-xl\n                        pt-10\n                        font-bold\n                      \">\n            Properties\n          </div>\n          <div>\n            <div className=\"grid grid-cols-2 lg:grid-cols-2 md:grid-cols-4 py-3 sm:gap-2 sm:grid-cols-2 xl:grid-cols-4\">\n              {propertiy.length === 0 && (\n                <>\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                  <Skeleton.Button active size=\"large\" shape=\"default\" />\n                </>\n              )}\n              {propertiy.map((attributes, index) => (\n                <PropertiesCard\n                  propertiy={attributes.trait_type}\n                  value={attributes.value}\n                  key={index}\n                />\n              ))}\n            </div>\n          </div>\n          <div\n            className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-sm\n                      sm:text-xl\n                      pt-10\n                      font-bold\n                      \">\n            Details\n          </div>\n          <div\n            className=\"grid grid-cols-2 lg:grid-cols-2\n                        xl:pr-60\n                        lg:pr-20 md:grid-cols-2 md:pr-80\n                        sm:gap-1 sm:grid-cols-2\">\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              Contract Address :{\" \"}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              <a\n                href={\n                  \"https://songbird-explorer.flare.network/address/\" +\n                  contractAddress +\n                  \"/token-transfers\"\n                }\n                className=\"text-blue-500\n                        dark:text-blue-500\n                        dark:hover:text-blue-300\"\n                target=\"_blank\"\n                rel=\"noreferrer\">\n                {contractAddress.slice(0, 4)} ..... {contractAddress.slice(-4)}\n              </a>\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              Token ID :{\" \"}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \n                      \">\n              {nftid}\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              Token Standard :\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              ERC 721\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              Blockchain :\n            </div>\n            <div\n              className=\"font-general-regular \n                      text-left text-ternary-dark\n                      dark:text-white\n                      text-xs\n                      sm:text-xs\n                      pt-3\n                      font-bold\n                      \">\n              songbird\n            </div>\n          </div>\n          {account !== nftOwner ? (\n            <div className=\"mt-10 sm:flex w-full\">\n              <div className=\"flex justify-between md:pt-0 pt-2 sm:w-1/3 w-full\">\n                {loading ? (\n                  <button\n                    className=\"w-full h-10 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                  hover:from-pink-600  hover:to-purple-700\n                                    duration-300 font-general-medium hover:bg-indigo-600\n                                    rounded-md shadow-sm text-md text-white font-bold text-sm\n                                  \">\n                    <div className=\"flex justify-center p-2 w-full\">\n                      <MetroSpinner size={27} />\n                    </div>\n                  </button>\n                ) : (\n                  <button\n                    className=\"sm:w-full h-10 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                    duration-300 font-general-medium \n                                    rounded-md shadow-sm text-md text-white w-full font-bold text-sm\n                                  \"\n                    onClick={() => buyNFT()}>\n                    Buy Now\n                  </button>\n                )}\n              </div>\n            </div>\n          ) : (\n            <>\n              <div className=\"mt-10 sm:flex w-full\">\n                <div className=\"flex justify-between sm:w-1/3 w-full\">\n                  {loading ? (\n                    <button\n                      className=\"w-full bg-transparent \n                                  dark:border-2 bg-gradient-to-r\n                                from-purple-700 to-pink-600\n                                hover:from-pink-600  hover:to-purple-700\n                                  duration-300 font-general-medium hover:bg-indigo-600\n                                  rounded-md shadow-sm text-md text-white font-bold text-sm h-50\n                                  \">\n                      <div className=\"flex justify-center p-2 w-full\">\n                        <MetroSpinner size={30} />\n                      </div>\n                    </button>\n                  ) : (\n                    <button\n                      className=\"sm:w-full sm:h-50 bg-transparent dark:border-2 bg-gradient-to-r\n                                  from-purple-700 to-pink-600\n                                  hover:from-pink-600  hover:to-purple-700\n                                    duration-300 font-general-medium hover:bg-indigo-600\n                                    rounded-md shadow-sm text-md text-white h-10 w-full font-bold text-sm\n                                  \"\n                      onClick={() => unListNFT()}>\n                      UnList Now\n                    </button>\n                  )}\n                </div>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </motion.section>\n  );\n};\n\nexport default Buy;\n","import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport Marketplace from \"./component/Marketplace/Marketplace\";\nimport AppHeader from \"./component/Navbar\";\nimport AppFooter from \"./component/Footer\";\nimport Banner from \"./component/Banner\";\nimport Mynft from \"./component/Mynft\";\nimport Sell from \"./component/Sell\";\nimport Buy from \"./component/Buy\";\n\nimport { AnimatePresence } from \"framer-motion\";\n\nimport \"./App.css\";\nimport { createContext, useState } from \"react\";\n\nexport const AccountContext = createContext(null);\nfunction App() {\n  const [accountId, setAccountId] = useState(\"\")\n\n  return (\n    <AnimatePresence>\n      <div\n        className=\"bg-white dark:bg-blue-black duration-300 transition\"\n        style={{ minHeight: \"1024px\" }}>\n        <Router>\n          <AccountContext.Provider value={{ accountId, setAccountId }}>\n            <AppHeader />\n          </AccountContext.Provider>\n\n          <Routes>\n            <Route path=\"/\" element={<Marketplace accountId={accountId} setAccountId={setAccountId} />} />\n            <Route path=\"/\" element={\n              <Banner />\n            } />\n\n            {/* <Route path=\"/mynft/:contractAddress\" element={<Mynft />} />\n            <Route\n              path=\"/mynft/:type/:contractAddress/:nftid\"\n              element={<Sell />}\n            />\n            <Route path=\"/buy/:contractAddress/:nftid\" element={<Buy />} /> */}\n          </Routes>\n          <AppFooter />\n        </Router>\n        {/* <ScrollButton /> */}\n      </div>\n    </AnimatePresence>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nimport { Web3ReactProvider } from '@web3-react/core'\n\nimport { ethers } from 'ethers'\n\nconst getLibrary = (provider) => {\n  const library = new ethers.providers.Web3Provider(provider)\n  library.pollingInterval = 8000 // frequency provider is polling\n  return library\n}\n\nconst getChainId = (provider) => {\n  const library = new ethers.providers.Web3Provider(provider)\n  return library.chainId\n}\nReactDOM.render(\n  <React.StrictMode>\n    <Web3ReactProvider getLibrary={getLibrary} chainId={getChainId}>\n      <App />\n    </Web3ReactProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n","module.exports = {\n  baseURI: \"https://staking.doodcats.net/assets/load\", // replace ipfs:// with https://gateway.pinata.cloud/ipfs/\n  dedbaseURI:\n    \"https://gateway.pinata.cloud/ipfs/QmPHYcJ3scDDCzxsMv7KBLj8dRoX4DbbmgrVsyBhZe7w3m\", // replace ipfs:// with https://gateway.pinata.cloud/ipfs/\n\n  //NFT Contract Addresss\n  SPACEKITTYADDRESS: \"0x6C4fEcB327b2fBA64a1D56f19683969A95918E40\",\n  SPACEOWLSADDRESS: \"0xB89A7324FD7d194DD76EAF8EfA2de11fe03cceC6\",\n  DRAGONDOODLEADDRESS: \"0x130163f0eb62c037730531cdF3C2481b706d9634\",\n  DOODNFTADDRESS: \"0x279a222a18C033124Ab02290dDec97912A8b7185\",\n  DEDNFTADDRESS: \"0x23adf58de3864D5F0d8e06acE36Ee8954e1Ed2bE\",\n\n  ELEMENTCATSADDRESS: \"0x7ebAE7063BC4Fb86B19b69087a899E8457Ba8bD7\",\n  ELEMENTOWLSADDRESS: \"0x336FFe8CB886C208940723D9CE2d16df12eA3c2D\",\n  ELEMENTDOGSADDRESS: \"0x09aD3Cc2d8D512109A7961546d979088DEC4B6D0\",\n  ELEMENTOCTOPUSADDRESS: \"0x572A404C325c119ae758A32Bdf196B1c9ed3C1cf\",\n  QAFADDRESS: \"0xd1eD4e7486E83C304a3599010994c35d66FDB704\",\n\n  ROYALRATSADDRESS: \"0x9C6aCAb0Ebd6808CCf18f1A58808DDd6eF6deDc8\",\n  CLASSICALCATSADDRESS: \"0x45Ec22BDCDD9D73e1AF43baBBCd4a8279ffC26e5\",\n  ANCIENTALIENSADDRESS: \"0x242D1836cf477b50713CCB918EBb79F070be2120\",\n  PRIMORDIALPLANETOIDSADDRESS: \"0x039ee36d11C825437621C16c5D71D05F09bF4B40\",\n  BADBUDDIESADDRESS: \"0x104d6F6E48b4daabe7c4Cc849b0d485f1af48605\",\n  BADBUDDIES2ADDRESS: \"0xf93a5592887B8e46A4Bb808fB8f702F33E60E292\",\n  BADBUDDIES3ADDRESS: \"0xe2AF8A40d6B0AEEd9A2851Bee78e0D2157a1d8FA\",\n\n  // Token Addresses to buy\n  SDOODTOKENADDRESS: \"0x697bb3B5E1eCf4fEbE6016321b0648d3d6C270B6\",\n  CARETOKENADDRESS: \"0xb1D60fA6FABd9A2Ad89960d070350552E47fb0D6\",\n\n  // Marketplace Contract Addresss\n  MARKETPLACEADDRESS: \"0x01B19091C03b9e0309442fC91aE5F440f3c8E548\",\n\n  // IPFS Addresss\n  DOODCATIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmdjzdH9N5QYpBVRc3FoKo2z77piHHrzh6QstztVA8TfyE\",\n  DEDDOODIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmQTLAVxNHWSShaWq2WGuRWUQKX1ptqoJzMCGfw5tncKYv\",\n  SPACEKITTYIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmXpmUf1TgeLMNfmeE94BBrAdSKULmt1GpRCBwqWv4b8qM\",\n  SPACEOWLIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmfBzosY7rHzj2vbafxwPwoMkTVaEhBxivkyQR5nfHfX7K\",\n  DRAGONDOODLEIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmbrLg6cFLnbwCpks3hsGSHXKWDwAZRJ7VGWefTQPcbe8Y\",\n  ELEMENTOWLSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmUDFvmc3Ff4VdiEGmTwfR6MfaDv4GuMhANtWPUVM7MC1n\",\n  ELEMENTDOGSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmVHAnwiAf8Rds7CE81dMEffsQJNTa3PATRCjs32Q4ncsd\",\n  ELEMENTOCTOPUSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmTEDC4At3Qb8nUT8UPjoUjK6ZrQsDkMzwB8SY6VABqjky\",\n  QAFIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmPx9K2gfN44Yg84zV3bbmgwSYiHGE8sDT6b69imtHtDTT\",\n  ROYALRATSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/Qmeh5rERAXS5tTyoXweJ6Pm6uqD1fYeAY7uwePcQFs4Bfk\",\n  CLASSICALCATSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/Qmenyg8SiTw2jf1xRJipLHsUdkZ8jApoPo8Y9jybfSmCSp\",\n  ANCIENTALIENSIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmXPWBM6Uqtamju7JcKPuUHAPcdyxTLVJCiHWs6TqKCABy\",\n  PLANETOIDSIPFSADDRESS:\n    \"https://bafybeigm35d7s5oahjphyqkaeqswvnry7rlva2r5sk73f5bkjp3ybfgjee.ipfs.nftstorage.link\",\n  BADBUDDIESIPFSADDRESS:\n    \"https://bafybeibfmtnyyojal4hgjgs7yz5mmwcfotvbj62vzlrlzjqjx2ibg42y5q.ipfs.nftstorage.link\",\n  BADBUDDIES2IPFSADDRESS:\n    \"https://bafybeidgictdcpg7fabu4v5epg7md4vi3ce7cepzoilq77zessqeefb3wm.ipfs.nftstorage.link\",\n  BADBUDDIES3IPFSADDRESS:\n    \"https://bafybeigje2kqqsjgjzxu7m6ok47iq647thlm5klxdru3fvdapgac7m3fqu.ipfs.nftstorage.link\",\n\n  // IMG IPFS Address\n  DOODCATIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmWGAWmuHZ4xzMp8eRyB8Ntut9xwPuKej9XmM5AWmsNQLZ\",\n\n  DEDDOODIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmPHYcJ3scDDCzxsMv7KBLj8dRoX4DbbmgrVsyBhZe7w3m\",\n  SPACEKITTYIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmWHSkY7FuDjN5GYWpYy2iNWtGGQWsNGrfoY6MB5yjk3MC\",\n  SPACEOWLIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmSUoT9TEsCyJ8Wg358DJZ83AFV1tuxvfcQRmurturBLcG\",\n  DRAGONDOODLEIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmSNUC7vQk9aJb4wSBvhGcqJffrcohBEnwe1TBQgx79Hv2\",\n  ELEMENTOWLSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmVhYZgzoLeW4zTG9AjzfsQ1RdX82y9aToKKyrdcQhez7h\",\n  ELEMENTDOGSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmbupbxwRU1X1VBrZrXAEuJ5p4Ybm1LmEZXAfhZk81A58L\",\n  ELEMENTOCTOPUSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmadidPpLEQKEoTGhdNafzosbmjCewoTkK4RVxyJpfeD41\",\n  QAFIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/Qmc4UMxVj1ErgPddqgC9Jh6SaAzk5pi9gUfsMtkZgt87nD\",\n  ROYALRATSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmQimSMic67Sb6i2Ug6ik2w65usTs2jhp63Y6egGi9VsGm\",\n  CLASSICALCATSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmTKi3DBJXeAtL5mq1d1DGdoyC9CpkXBUwPyJSUzChT6Pu\",\n  ANCIENTALIENSIMGIPFSADDRESS:\n    \"https://spacecats.mypinata.cloud/ipfs/QmTS6nANHKGfvbQ8yqpkppUbTEcFSoSWEKoV9satdBCoiw\",\n  PLANETOIDSIMGIPFSADDRESS:\n    \"https://bafybeiac6l2svv5jdz6jkzm3nthui5umdy4piwle3ibf2wozgwfsn3oj6i.ipfs.nftstorage.link\",\n  BADBUDDIESIMGIPFSADDRESS:\n    \"https://bafybeiewbiuwfm4lb32dqu2iy2beexpgbe2bixwyv4mbrqysvsvjh4w2bu.ipfs.nftstorage.link\",\n  BADBUDDIES2IMGIPFSADDRESS:\n    \"https://bafybeidal7gu2222yad5a4muqtsxzbtrrlu4cueagsalzqidgv6zftbgry.ipfs.nftstorage.link\",\n  BADBUDDIES3IMGIPFSADDRESS:\n    \"https://bafybeifmncnwroplafavhxgzoemlvxdp4354hpcgt4qw5hutbotrlhf3fa.ipfs.nftstorage.link\",\n};\n"],"sourceRoot":""}